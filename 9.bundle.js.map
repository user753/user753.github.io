{"version":3,"sources":["webpack:///./src/games/mnemonics/dossier/meta.ts","webpack:///./src/core/ui/controls/GraphicsImg.ts","webpack:///./src/core/ui/components/games/gameUI/panelComponent.ts","webpack:///./src/core/ui/components/games/baseMainGameComponent.ts","webpack:///./src/core/utils/circleSeq.ts","webpack:///./src/core/ui/components/games/gameUI/tutorialTextComponent.ts","webpack:///./src/games/mnemonics/dossier/assets.ts","webpack:///./src/games/mnemonics/dossier/components/dossierComponent.ts","webpack:///./src/games/mnemonics/dossier/components/personComponent.ts","webpack:///./src/games/mnemonics/dossier/components/mainComponent.ts","webpack:///./src/games/mnemonics/dossier/components/rememberComponent.ts","webpack:///./src/games/mnemonics/dossier/components/questionComponent.ts","webpack:///./src/games/mnemonics/dossier/levels.ts","webpack:///./src/games/mnemonics/dossier/logic.ts","webpack:///./src/games/mnemonics/dossier/words.ts","webpack:///./src/games/mnemonics/dossier/wordsRu.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAE+C;AACS;AACzB;AACF;AAEtB,IAAM,MAAM,GAAG,SAAS;AAC/B,IAAM,YAAY,GAAiB;IACjC,WAAW,EAAE,GAAG;IAChB,UAAU,EAAE,CAAC;IACb,kBAAkB,EAAE,CAAC;CACtB;AAED,IAAM,YAAY,GAAiB;IACjC,MAAM;IACN,eAAe,EAAE,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAC,CAAC;CAChD;AAEM,IAAM,QAAQ,GAAkB;IACrC,MAAM;IACN,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,qDAAK;IACZ,SAAS,EAAE,gFAAa;IACxB,YAAY;IACZ,YAAY;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,uDAAM,CAAC,IAAI;IACnB,MAAM,EAAE,uDAAM,CAAC,IAAI;IACnB,MAAM,EAAE,uDAAM,CAAC,IAAI;IACnB,UAAU,EAAE,CAAC;IACb,iBAAiB,EAAE,CAAC;IACpB,IAAI,EAAE;QACJ,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,SAAS,EAAE,IAAI;KAChB;CACF;;;;;;;;;;;;;;;;;;;;;ACpCyC;AACM;AACQ;AAGxD;IAAiC,8EAAO;IAGtC,qBAAoB,IAAkC;QAAtD,YACE,iBAAO,SAER;QAHmB,UAAI,GAAJ,IAAI,CAA8B;QAEpD,KAAI,CAAC,GAAG,GAAG,KAAI,CAAC,GAAG,CAAC,iFAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;;IACrD,CAAC;IAED,oCAAc,GAAd;QACE,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;YAC9C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;YAChD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;SACvB;IACH,CAAC;IACH,kBAAC;AAAD,CAAC,CAhBgC,yEAAO,GAgBvC;;AAGD;IAAmC,gFAAW;IAE5C,uBAAY,KAGX;QAHD,iBASC;QALC,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,mEAAK,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC,CAAC;QAClE,0BAAM,WAAC;YACL,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC;YACxB,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC;QACjE,CAAC,CAAC;;IACJ,CAAC;IAEH,oBAAC;AAAD,CAAC,CAbkC,WAAW,GAa7C;;;;;;;;;;;;;;;;;;;;;ACtCyC;AAEY;AAEE;AAIxD;IAAoC,iFAAqB;IAQvD,sCAAsC;IAEtC;QAAA,YACE,iBAAO,SAUR;QApBD,eAAS,GAAG,mEAAK,CAAC,MAAM,CAAC;YACvB,MAAM,EAAE,EAAE;SACX,CAAC;QAUA,wEAAwE;QACxE,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,iFAAW,CAAC,WAAC;YACvC,IAAI,KAAI,CAAC,KAAK,EAAE;gBACd,CAAC,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC;gBACtD,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBAC7F,CAAC,CAAC,OAAO,EAAE;aACZ;QACH,CAAC,CAAC,CAAC;;IACL,CAAC;IAED,+BAAM,GAAN;IACA,CAAC;IAED,sCAAa,GAAb;QAEE,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;QAC7B,wCAAwC;IAC1C,CAAC;IAEH,qBAAC;AAAD,CAAC,CAhCmC,+EAAS,GAgC5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCqC;AACO;AACX;AACQ;AAEQ;AAC4B;AACV;AAER;AACrC;AACE;AAEzB,IAAM,SAAS,GAAG,SAAS;AAE3B,IAAM,aAAa,GAAG,IAAI;AAC1B,IAAM,UAAU,GAAG,GAAG;AAEf,IAAM,SAAS,GAAG;IACvB,mBAAmB,EAAE,GAAG;IACxB,aAAa;IACb,UAAU;CACX;AAED;IAA4D,wFAAoB;IAkB9E,+BAAY,OAA6B;QAAzC,YACE,kBAAM,OAAO,CAAC,SAiBf;QAlCD,mBAAa,GAAG;YACd,MAAM,EAAE,CAAC;YACT,yBAAyB,EAAE,KAAK;SACjC;QAED,kBAAY,GAAG;YACb,YAAY,EAAE,KAAK;YACnB,iBAAiB,EAAE,KAAK;SACzB;QAMD,oBAAc,GAAG,uGAAiB,CAAC,IAAI;QAIrC,OAAO,CAAC,SAAS,CAAC,aAAa,GAAG,KAAI;QACtC,OAAO,CAAC,SAAS,GAAG,KAAI,CAAC,YAAY,EAAE;QAEvC,KAAI,CAAC,aAAa,GAAG,IAAI;QACzB,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC;YACrB,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE;YACxD,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE;YACvD,mEAAY,CAAC,OAAO,EAAE;QACxB,CAAC,CAAC;QAEF,KAAI,CAAC,cAAc,CACjB,WAAC,IAAI,4FAAiB,CAAC,UAAU,EAA5B,CAA4B,EACjC,WAAC;YACC,KAAI,CAAC,YAAY,CAAC,CAAC,GAAG,qFAAiB,CAAC,SAAS;QACnD,CAAC,CAAC;;IAEN,CAAC;IAxBD,4CAAY,GAAZ;QACE,OAAO,EAAS;IAClB,CAAC;IAwBD,sBAAI,+CAAY;aAAhB;YACE,IAAM,MAAM,GAAG,qFAAiB,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7D,OAAO,MAAM;QACf,CAAC;;;OAAA;IAED,4DAA4B,GAA5B,UAA6B,KAA4B;QAAzD,iBAiBC;QAjB4B,gCAAQ,SAAS,CAAC,UAAU;QACvD,IAAI,YAAY,GAAG,CAAC;QACpB,IAAI,MAAM,GAAoB,SAAS;QACvC,IAAI,CAAC,qFAAiB,CAAC,UAAU,IAAI,sEAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE;YACpF,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAM,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC;YAC/B,MAAM,CAAC,CAAC,GAAG,KAAK;YAChB,YAAY,GAAG,CAAC,KAAK;SACtB;QACD,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,qFAAiB,CAAC,cAAc,GAAG,YAAY;QACtE,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,CACrD,EAAC,CAAC,EAAE,CAAC,EAAC,EAAE,SAAS,CAAC,aAAa,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CACzE;QACD,IAAI,MAAM,EAAE;YACV,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,cAAM,YAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,EAAzB,CAAyB,CAAC;SAC1D;QACD,OAAO,KAAK;IACd,CAAC;IAED,8CAAc,GAAd;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,4BAA4B,EAAE;QACjD,OAAO,KAAK;IACd,CAAC;IAED,0CAAU,GAAV;QAAA,iBAgBC;QAfC,IAAI,2DAAG,CAAC,OAAO,IAAI,CAAC,gDAAG,CAAC,YAAY,EAAE;YACpC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,EAAE;YAC/D,OAAO,2EAAO,CAAC,QAAQ,EAAE;SAC1B;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,+DAAU,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;SAC9C;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE;QACnC,IAAM,MAAM,GAAG,2EAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,EAAE;YACrE,KAAK,CAAC,KAAK,EAAE;YACb,OAAO,KAAK,CAAC,UAAU;QACzB,CAAC,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,cAAM,YAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,EAAE,EAA/D,CAA+D,CAAC;QACrF,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;QAC3B,OAAO,MAAM;IACf,CAAC;IAED,2CAAW,GAAX;QACE,IAAI,CAAC,iBAAiB,EAAE;IAC1B,CAAC;IAEO,iDAAiB,GAAzB;QAAA,iBAgBC;QAdC,IAAI,CAAC,WAAW,CAAC,cAAM,YAAI,CAAC,SAAS,CAAC,UAAU,EAAzB,CAAyB,EAAE,WAAC;YACjD,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,cAAM,YAAI,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAA9D,CAA8D,EACnF,WAAC;YACC,IAAI,KAAI,CAAC,aAAa,CAAC,yBAAyB,EAAE;gBAChD,KAAI,CAAC,cAAc,CAAC,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC;oBACnF,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC;aACH;iBAAM;gBACL,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC;QACJ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;IACxF,CAAC;IAEO,iDAAiB,GAAzB,UAA0B,IAAS;QAAnC,iBAQC;QAPC,IAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,IAAI,IAAI,CAAC,WAAW,EAAE;YAC3D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC;gBAC3D,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,2DAAI,CAAC,IAAI,CAAC,CAAC;YACrE,CAAC,CAAC;SACH;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,2DAAI,CAAC,IAAI,CAAC,CAAC;SACpE;IACH,CAAC;IAED,kDAAkB,GAAlB;QAAA,iBAEC;QADC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC,cAAM,YAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,EAA1B,CAA0B,CAAC;IAChG,CAAC;IAEH,4BAAC;AAAD,CAAC,CAzH2D,6FAAa,GAyHxE;;;;;;;;;;;;;;;;;;;;;AChJyD;AACpB;AACX;AAE3B;IAGE,mBAAoB,KAAe;QAAf,UAAK,GAAL,KAAK,CAAU;QAFnC,UAAK,GAAG,CAAC;IAE6B,CAAC;IAEvC,wBAAI,GAAJ;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK;QACxB,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;QACjD,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC1B,CAAC;IAED,6BAAS,GAAT,UAAU,KAAa;QAAvB,iBAEC;QADC,OAAO,6CAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,cAAM,YAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC;IAC9C,CAAC;IACH,gBAAC;AAAD,CAAC;;AAED;IAIE,iBAAmB,GAAW,EAAU,GAA2B;QAA3B,gCAAU,mFAAe,EAAE;QAAhD,QAAG,GAAH,GAAG,CAAQ;QAAU,QAAG,GAAH,GAAG,CAAwB;QAH3D,UAAK,GAAG,CAAC;QACT,SAAI,GAAa,EAAE;QAGzB,IAAI,CAAC,KAAK,EAAE;IACd,CAAC;IAED,0BAAQ,GAAR,UAAS,MAAc;QACrB,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE;YACtB,IAAI,CAAC,GAAG,GAAG,MAAM;YACjB,IAAI,CAAC,KAAK,EAAE;SACb;QACD,OAAO,IAAI;IACb,CAAC;IAED,uBAAK,GAAL;QACE,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;QACpD,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAM,IAAI,GAAG,4CAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;YAClE,IAAM,KAAK,GAAG,kDAAY,CAAC,OAAO,EAAE,IAAI,CAAC;YACzC,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC/C;QACD,IAAI,CAAC,IAAI,GAAG,OAAO;IACrB,CAAC;IAEO,6BAAW,GAAnB;QACE,IAAI,CAAC,KAAK,IAAI,CAAC;QACf,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAClC,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,KAAK,GAAG,CAAC;SACf;IACH,CAAC;IAED,2BAAS,GAAT,UAAU,KAAa;QAAvB,iBAEC;QADC,OAAO,6CAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,cAAM,YAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC;IAC9C,CAAC;IAED,sBAAI,GAAJ,UAAK,GAAY;QACf,IAAG,GAAG,EAAC;YACL,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;SACnB;QACD,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,WAAW,EAAE;QAClB,OAAO,CAAC;IACV,CAAC;IAED,0BAAQ,GAAR,UAAS,CAAS;QAChB,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;QACrB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SACxB;QACD,OAAO,CAAC;IACV,CAAC;IAED,0BAAQ,GAAR,UAAY,GAAQ,EAAE,IAAQ;QAC5B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;QACzB,OAAO,GAAG,CAAC,+DAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,gCAAc,GAAd,UAAkB,GAAQ,EAAE,KAAa;QAAzC,iBAEC;QADC,OAAO,6CAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,cAAM,YAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC;IACrD,CAAC;IACH,cAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpF0C;AACE;AACuB;AAC1B;AAE0B;AACS;AACnC;AACO;AACW;AACtB;AAUtC;IAA2C,wFAAqB;IAAhE;QAAA,qEA2EC;QA1EC,eAAS,GAAG,mEAAK,CAAC,MAAM,CAAC;YACvB,SAAS,EAAE,EAAE;YACb,WAAW,EAAE,EAAE;YACf,OAAO,EAAE,EAAE;YACX,YAAY,EAAE,EAAE;YAChB,QAAQ,EAAE,GAAG;YACb,GAAG,EAAE,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC;SACrB,CAAC;QAEF,uBAAiB,GAAG,mEAAK,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,EAAE;YAC/C,SAAS,EAAE,EAAE;YACb,WAAW,EAAE,EAAE;YACf,OAAO,EAAE,EAAE;SACZ,CAAC;QAEF,kBAAY,GAAG,cAAM,4FAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,KAAI,CAAC,SAAS,EAAtE,CAAsE;QAK3F,eAAS,GAAG,CAAC;;IAsDf,CAAC;IAjDC,oCAAI,GAAJ,UAAK,KAA6B;QAAlC,iBAyBC;QAzBI,kCAA6B;QAChC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS;QACjE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS;QAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,sGAAc,EAAE,CAAC,CAAC,aAAa,EAAE;QAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,mEAAG,CAAC,EAAE,8DAAM,oEAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAE,KAAK,EAAE,KAAK,CAAC,SAAS,IAAI,MAAM,IAAE,CAAC,CAAC,YAAY,EAAE;QAClH,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,CAAC;QACtC,IAAI,SAAS,GAAG,CAAC,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC;YAC1C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,qEAAO,CAAC,OAAO,EAAE,sEAAU,CAAC,IAAI,EAAE;gBACjE,KAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE;YACxC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAChC,6FAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;YACxC,IAAI,CAAC,cAAc,CAAC,cAAM,YAAI,CAAC,aAAa,CAAC,UAAU,EAA7B,CAA6B,EAAE,oBAAU;gBACjE,KAAI,CAAC,OAAO,CAAC,OAAO,GAAG,CAAC,UAAU;YACpC,CAAC,CAAC;SACH;QACD,IAAI,CAAC,cAAc,CAAC,cAAM,4FAAiB,CAAC,UAAU,EAA5B,CAA4B,EAAE,UAAC,EAAe;gBAAd,gBAAK,EAAE,kBAAM;YACrE,8DAA8D;YAC9D,IAAM,QAAQ,GAAG,CAAC;YAClB,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,qFAAiB,CAAC,SAAS,GAAG,KAAI,CAAC,YAAY,EAAE,CAAC,WAAW,GAAG,CAAC,GAAG,QAAQ;YAClH,KAAI,CAAC,UAAU,EAAE;QACnB,CAAC,CAAC;QACF,OAAO,IAAI;IAEb,CAAC;IAED,0CAAU,GAAV;QACE,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,OAAO;QACjE,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU;QAEjF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,mEAAK,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,GAAG,qFAAiB,CAAC,SAAS,CAAC;QAC3E,IAAM,KAAK,GAAG,gEAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,WAAC,IAAI,QAAC,CAAC,KAAK,EAAP,CAAO,CAAC,IAAI,qFAAiB,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,OAAO;QACnH,IAAI,CAAC,IAAI,CAAC,QAAQ,6DAAK,IAAI,CAAC,KAAK,IAAE,IAAI,EAAE,EAAC,KAAK,SAAE,MAAM,UAAC,IAAE;QAE1D,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,mEAAK,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;QACpC,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;SACxG;QACD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;IACzB,CAAC;IAED,6CAAa,GAAb;QACE,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK;QAC3B,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAEH,4BAAC;AAAD,CAAC,CA3E0C,6FAAa,GA2EvD;;;;;;;;;;;;;;;;;;;;;;;AC/FsD;AAG5B;AAErB,IAAQ,MAAM,CAEnB;AAFD,WAAc,MAAM;IACL,WAAI,GAAa,EAAE;AAClC,CAAC,EAFa,MAAM,KAAN,MAAM,QAEnB;AAEK,IAAQ,YAAY,CAIzB;AAJD,WAAc,YAAY;IACX,qBAAQ,GAAG,UAAU;IACrB,mBAAM,GAAG,QAAQ;IACjB,mBAAM,GAAG,QAAQ;AAChC,CAAC,EAJa,YAAY,KAAZ,YAAY,QAIzB;AAEK,IAAQ,MAAM,CAEnB;AAFD,WAAc,MAAM;IACL,WAAI,GAAG,CAAC,OAAO,CAAC;AAC/B,CAAC,EAFa,MAAM,KAAN,MAAM,QAEnB;AAEK,IAAQ,KAAK,CAYlB;AAZD,WAAc,KAAK;IACJ,YAAM,GAAG,QAAQ;IAEjB,UAAI,GAAG;QAClB,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,oEAAS,CAAC,kBAAkB,EAAE,IAAI,EAAE,qEAAU,CAAC,KAAK;KACzE;IACY,cAAQ,GAAG;QACtB,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,oEAAS,CAAC,kBAAkB,EAAE,IAAI,EAAE,qEAAU,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ;KAC1F;IACY,YAAM,GAAG;QACpB,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,oEAAS,CAAC,kBAAkB,EAAE,IAAI,EAAE,qEAAU,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ;KAC1F;AACH,CAAC,EAZa,KAAK,KAAL,KAAK,QAYlB;AAEK,IAAQ,MAAM,CAgBnB;AAhBD,WAAc,MAAM;IACL,SAAE,GAAG,IAAI;IACT,gBAAS,GAAG,WAAW;IACvB,YAAK,GAAG,OAAO;IACf,WAAI,GAAG,MAAM;IACb,YAAK,GAAG,UAAC,KAAa,IAAK,eAAQ,GAAG,KAAK,EAAhB,CAAgB;IAC3C,cAAO,GAAG,UAAC,KAAa,IAAK,iBAAU,GAAG,KAAK,EAAlB,CAAkB;IAC/C,WAAI,GAAG,UAAC,OAAgB,EAAE,KAAc,EAAE,SAAiB,EAAE,KAAa;QACrF,IAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO;QACvC,IAAM,SAAS,GAAG,gDAAU,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;QACzE,OAAO,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC,WAAC,IAAI,QAAC,IAAI,EAAE,EAAP,CAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK;IACnF,CAAC;IACY,WAAI,GAAmB;QAClC,OAAO,EAAE,EAAE;KACZ;AAEH,CAAC,EAhBa,MAAM,KAAN,MAAM,QAgBnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDiD;AACR;AAC0B;AACW;AAC/B;AACM;AACE;AAChB;AACA;AACE;AACH;AACqB;AACsB;AAKlF;IAAsC,mFAAqB;IAA3D;QAAA,qEA6DC;QA3DC,eAAS,GAAG,mEAAK,CAAC,MAAM,CAAC;YACvB,SAAS,EAAE,EAAC,CAAC,EAAE,CAAC,EAAC;YACjB,QAAQ,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC;YACtB,SAAS,EAAE,CAAC;YACZ,UAAU,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAC;YACnB,UAAU,EAAE,GAAG;YACf,UAAU,EAAE,EAAC,CAAC,EAAE,CAAC,EAAC;YAClB,MAAM,EAAE,EAAC,CAAC,EAAE,EAAE,EAAC;YACf,OAAO,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC;SAClB,CAAC;QAEF,eAAS,GAAG,KAAI,CAAC,QAAQ,CAAC,+EAAM,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC;QAC5F,YAAM,GAAG,KAAI,CAAC,GAAG,CAAC,KAAI,CAAC,eAAe,CAAC,4GAAe,CAAC,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE;QACtG,uBAAiB,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,yEAAO,EAAE,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE;;IA8C3F,CAAC;IAzCC,yCAAc,GAAd,UAAe,IAAiB;QAC9B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,cAAI;YACzB,IAAI,CAAC,WAAW,CAAC,wGAAkB,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;QACxE,CAAC,CAAC;IACJ,CAAC;IAED,oCAAS,GAAT;QAEE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAC,CAAC;QAC5D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAC,IAAI,QAAC,CAAC,OAAO,GAAG,KAAK,EAAjB,CAAiB,CAAC;IAC5C,CAAC;IAED,mCAAQ,GAAR,UAAS,IAAiB;QACxB,+EAAU,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,OAAO,GAAG,IAAI;IACvD,CAAC;IAED,wCAAa,GAAb;QAAA,iBAuBC;QAtBC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAC,CAAC;QAC7D,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC;QAChC;;;;;;;;;;;;;;;WAcH,EAdI,cAAM,EAAE,iBAAS,EAAE,aAAK,CAc5B;QACH,IAAI,CAAC,SAAS,GAAG,SAAS;QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK;QAElB,mEAAK,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;QACpD,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE;IACtC,CAAC;IAEH,uBAAC;AAAD,CAAC,CA7DqC,6FAAa,GA6DlD;;;;;;;;;;;;;;;;;;;;;;AC9EyC;AAC0B;AACpB;AACK;AAGrD;IAAqC,kFAAsD;IAA3F;QAAA,qEAkBC;QAhBC,eAAS,GAAG,mEAAK,CAAC,MAAM,CAAC,EAAE,CAAC;QAC5B,QAAE,GAAG,KAAI,CAAC,QAAQ,CAAC,8EAAM,CAAC,KAAK,CAAC;QAChC,WAAK,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,yEAAO,EAAE,CAAC;;IAcjC,CAAC;IAZC,uCAAa,GAAb;QAAA,iBAUC;QATC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;QAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;QAChC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,IAAI,MAAM,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;YACtE,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK;QACzC,KAAK,CAAC,OAAO,CAAC,UAAC,EAAgB;gBAAf,eAAO,EAAE,aAAK;YAC5B,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAI,CAAC,SAAS,CAAC,8EAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;QAC7F,CAAC,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;QACjC,IAAI,CAAC,WAAW,EAAE;IACpB,CAAC;IAEH,sBAAC;AAAD,CAAC,CAlBoC,6FAAa,GAkBjD;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBuD;AAEN;AACR;AAC0C;AACO;AAKL;AACxC;AAEO;AAErD,IAAM,SAAS,GAAG;IAChB,KAAK,EAAE,GAAG;CACX;AAED;IAAmC,gFAAqB;IAAxD;QAAA,qEAiFC;QAhFC,eAAS,GAAG,mEAAK,CAAC,MAAM,CAAC;YACvB,YAAY,EAAE,CAAC,GAAG;YAClB,MAAM,EAAE,EAAC,CAAC,EAAE,EAAE,EAAC;SAChB,CAAC;QAEF,iBAAW,GAAG,mEAAK,CAAC,EAAE,CAAC;YACrB,QAAQ,EAAE,EAAC,CAAC,EAAE,mEAAK,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC;YAC5C,QAAQ,EAAE,EAAC,CAAC,EAAE,mEAAK,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC;YAC5C,GAAG,EAAE,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAC;SACvB,EAAE;YACD,QAAQ,EAAE,EAAC,CAAC,EAAE,mEAAK,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC;YAC5C,QAAQ,EAAE,EAAC,CAAC,EAAE,mEAAK,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC;YAC5C,GAAG,EAAE,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAC;SACvB,CAAC;QAEF,QAAE,GAAG,KAAI,CAAC,QAAQ,CAAC,uDAAM,CAAC,EAAE,CAAC;QAE7B,cAAQ,GAAG,KAAI,CAAC,GAAG,CAAC,KAAI,CAAC,wBAAwB,CAAC,+GAAiB,EAAE,EAAC,UAAU,EAAE,cAAM,YAAI,CAAC,UAAU,EAAE,EAAjB,CAAiB,EAAC,CAAC,CAAC;aACzG,QAAQ,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACnC,YAAY,CAAC,WAAC,IAAI,QAAC,CAAC,OAAO,GAAG,KAAK,EAAjB,CAAiB,CAAC;QACvC,cAAQ,GAAG,KAAI,CAAC,GAAG,CAAC,KAAI,CAAC,eAAe,CAAC,6EAAiB,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aAC7F,YAAY,CAAC,WAAC,IAAI,QAAC,CAAC,OAAO,GAAG,KAAK,EAAjB,CAAiB,CAAC;;IA2DzC,CAAC;IAvDC,mCAAW,GAAX,UAAY,aAAsB;QAChC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,aAAa;QACrC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,aAAa;QACtC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,6DAAY,CAAC,MAAM,CAAC,CAAC,CAAC,6DAAY,CAAC,MAAM,CAAC,CAAC;SAClG;IACH,CAAC;IAED,kCAAU,GAAV;QACE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IACzB,CAAC;IAED,uEAAuE;IACvE,iEAAiE;IACjE,aAAa;IACb,qBAAqB;IACrB,sBAAsB;IACtB,SAAS;IACT,oEAAoE;IACpE,gDAAgD;IAChD,SAAS;IACT,MAAM;IACN,IAAI;IACJ,sCAAc,GAAd;QAAA,iBAgBC;QAfC,OAAO;YACL,KAAK,EAAE;gBACL,iFAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC9C,CAAC;YACD,UAAU,EAAE,2EAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACzC,iFAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC5C,OAAO,2EAAO,CAAC,QAAQ,EAAE;YAC3B,CAAC,CAAC;SACH;QAED,WAAW;QACX,mBAAmB;QACnB,OAAO;QACP,mCAAmC;QACnC,IAAI;IACN,CAAC;IAED,8BAAM,GAAN;QACE,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI;QAC1C,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY;QACvD,IAAI,CAAC,aAAa,CAAC,yBAAyB,GAAG,IAAI;QACnD,IAAI,CAAC,UAAU,EAAE;QACjB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,oHAAqB,CAAC,CAAC,IAAI,EAAE,CAAC;SAC7E;IACH,CAAC;IAED,iCAAS,GAAT,UAAU,IAAU;QAClB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACxB,CAAC;IAEH,oBAAC;AAAD,CAAC,CAjFkC,6GAAqB,GAiFvD;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGyC;AAC0B;AAEW;AACvC;AACQ;AACU;AAC0B;AACF;AACrC;AAG7C,IAAM,SAAS,GAAG,EAAE;AAEpB;IAAuC,oFAAuC;IAA9E;QAAA,qEAkEC;QAjEC,eAAS,GAAG,mEAAK,CAAC,MAAM,CAAC;YACvB,MAAM,EAAE,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC;SACxB,CAAC;QAEF,iBAAW,GAAG,mEAAK,CAAC,EAAE,CAAC;YACrB,GAAG,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC;YACb,OAAO,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC;SACxB,EAAE;YACD,GAAG,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC;YACb,OAAO,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC;SACxB,CAAC;QAEF,iBAAW,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,yEAAO,EAAE,CAAC;aAClC,YAAY,CAAC,WAAC,IAAI,QAAC,CAAC,cAAc,GAAG,GAAG,EAAtB,CAAsB,CAAC;aACzC,YAAY,EAAE,CAAC,YAAY,CAAC,WAAC,IAAI,QAAC,CAAC,OAAO,GAAG,CAAC,KAAI,CAAC,UAAU,EAA5B,CAA4B,CAAC;QAEjE,aAAO,GAAG,KAAI,CAAC,GAAG,CAAC,KAAI,CAAC,eAAe,CAAC,6GAAgB,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC;QAE5G,iBAAW,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,iEAAG,CAAC,KAAI,CAAC,SAAS,CAAC,6DAAY,CAAC,QAAQ,CAAC,EAClE,cAAM,YAAI,CAAC,UAAU,EAAE,EAAjB,CAAiB,EAAE,SAAS,EAAE,IAAI,mFAAa,CAAC;YACpD,KAAK,EAAE,sDAAK,CAAC,MAAM;SACpB,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC;QAYpD,WAAK,GAAG,CAAC;;IAgCX,CAAC;IAzCC,sCAAU,GAAV;QACE,IAAI,CAAC,KAAK,IAAI,CAAC;QACf,IAAI,CAAC,aAAa,EAAE;IACtB,CAAC;IAED,kCAAM,GAAN;QAAA,iBAEC;QADC,IAAI,CAAC,mBAAmB,CAAC,cAAM,YAAI,CAAC,eAAe,EAAE,EAAtB,CAAsB,CAAC;IACxD,CAAC;IAID,yCAAa,GAAb;QAAA,iBASC;QARC,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAQ;QACxC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,KAAK,GAAG,CAAC,IAAI,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAnC,CAAmC,CAAC;QAClE,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;SAC9B;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;SACxB;IACH,CAAC;IAED,2CAAe,GAAf;QACE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,mEAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QACjE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;QAC9B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;IAC5B,CAAC;IAED,qCAAS,GAAT,UAAU,IAAU;QAApB,iBAUC;QATC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAM,IAAI,YAAI,CAAC,WAAW,CAAC,GAAG,CAC1D,KAAI,CAAC,wBAAwB,CAAC,2GAAe,EAAE;YAC7C,MAAM;YACN,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,wGAAkB,EAAE,CAAC,EAJH,CAIG,CAAC;QAC5C,IAAI,CAAC,aAAa,EAAE;QACpB,IAAI,CAAC,eAAe,EAAE;IACxB,CAAC;IAEH,wBAAC;AAAD,CAAC,CAlEsC,6FAAa,GAkEnD;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFyD;AAChB;AAC0B;AAEvB;AACG;AACR;AACE;AACkB;AACwB;AAGpF,IAAM,SAAS,GAAG;IAChB,KAAK,EAAE,GAAG;CACX;AAED;IAAuC,oFAAa;IAApD;QAAA,qEAwEC;QAtEC,eAAS,GAAG,mEAAK,CAAC,MAAM,CAAC;YACvB,MAAM,EAAE,EAAC,CAAC,EAAE,EAAE,EAAC;YACf,cAAc,EAAE,EAAE;SACnB,CAAC;QAEF,iBAAW,GAAG,mEAAK,CAAC,EAAE,CAAC;YACrB,MAAM,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC;SACjB,EAAE;YACD,MAAM,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC;SACjB,CAAC;QAEF,UAAI,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,iEAAG,CAAC,EAAE,CAAC,CAAC;QAI5B,kBAAY,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,yEAAO,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QACxG,kBAAY,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,yEAAO,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC;;IAsDzF,CAAC;IAnDC,2CAAe,GAAf;QACE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,mEAAK,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAClE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;IACjC,CAAC;IAED,wCAAY,GAAZ,UAAa,QAAkB;QAA/B,iBAaC;QAZC,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC;QACtD,OAAO,CAAC,OAAO,GAAG,IAAI;QACtB,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC;QAC5C,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,CAAC;YAClD,IAAM,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,sEAAQ,CAC5C,mEAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,KAAI,CAAC,OAAO,CAAC,8EAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YAC1E,CAAC,EAAE,6EAAK,CAAC,MAAM,CAAC,CAAC;YACnB,OAAO,KAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC;QAC3E,CAAC,CAAC;QACF,IAAI,CAAC,eAAe,EAAE;QACtB,IAAI,CAAC,eAAe,EAAE;IACxB,CAAC;IAED,oCAAQ,GAAR,UAAS,MAAmB;QAA5B,iBAcC;QAbC,IAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,IAAY;QAC1C,IAAM,KAAK,GAAG,MAAM,CAAC,kBAAkB,IAAI,CAAC;QAC5C,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC;QAC7E,IAAI,MAAM,CAAC,MAAM,IAAI,sEAAY,CAAC,cAAc,EAAE;YAEhD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvD,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,GAAG,KAAK;gBAC1D,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;gBAC1C,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YAC7B,CAAC,CAAC;SACH;IAEH,CAAC;IAED,qCAAS,GAAT,UAAU,IAAU;QAApB,iBAQC;QAPC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAM;YACvC,YAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAI,CAAC,wBAAwB,CAAC,6GAAgB,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,WAAC;gBAC3F,CAAC,CAAC,SAAS,EAAE;gBACb,CAAC,CAAC,OAAO,GAAG,KAAK;YACnB,CAAC,CAAC;QAHF,CAGE,CAAC;QACL,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,kCAAM,GAAN;QAAA,iBAEC;QADC,IAAI,CAAC,mBAAmB,CAAC,cAAM,YAAI,CAAC,eAAe,EAAE,EAAtB,CAAsB,CAAC;IACxD,CAAC;IAEH,wBAAC;AAAD,CAAC,CAxEsC,6FAAa,GAwEnD;;;;;;;;;;;;;;;;;ACxFqD;AAUtD,eACE,WAAmB,EACnB,gBAAwB,EACxB,UAAmB,EACnB,WAAoB,EACpB,WAAoB;IAEpB,OAAO,EAAC,WAAW,eAAE,gBAAgB,oBAAE,UAAU,cAAE,WAAW,eAAE,WAAW,eAAC;AAC9E,CAAC;AAEM,IAAM,MAAM,GAAG,uFAAqB,CAAC;IAC1C,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;IAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;IAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;IAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IAC9B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IAC9B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC7B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;IAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IAC9B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IAC9B,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;CAC9B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AC1CkC;AACc;AACN;AACF;AACH;AACmB;AAC/B;AAI3B,IAAM,iBAAiB,GAAG,CAAC;AAG3B,IAAM,WAAW,GAAc,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC;AACnF,IAAM,OAAO,GAAG,YAAY;AAE5B,IAAM,eAAe,GAA4C;IAC/D,GAAG,EAAE;QACH,KAAK,EAAE,EAAE;QACT,OAAO,EAAE,CAAC;QACV,GAAG,EAAE,CAAC;QACN,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,CAAC;KACT;IACD,KAAK,EAAE;QACL,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,CAAC;QACV,GAAG,EAAE,CAAC;QACN,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,CAAC;KACT;CACF;AACD,IAAM,YAAY,GAAc,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC;AAC3D,IAAM,wBAAwB,GAA8B;IAC1D,GAAG,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC;IACrB,KAAK,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC;CACxB;AAED,IAAM,aAAa,GAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC;AAuBhF;IAA2B,wEAAsB;IAAjD;QAAA,qEAmFC;QAlFC,SAAG,GAAG,IAAI,mEAAe,EAAE;QAC3B,WAAK,GAAG,mFAAY,CAAC,QAAQ,EAAE;QAC/B,iBAAW,GAAG,iDAAW,CAAC,KAAI,CAAC,KAAK,EAAE,cAAM,WAAI,qEAAO,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC;QAC3D,oBAAc,GAAG,iDAAW,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,gBAAM;YACtD,+EAAK,CAAC,MAAM,EAAE,iDAAW,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAO;gBAC/C,+EAAK,CAAC,OAAO,EAAE,IAAI,qEAAO,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAA7D,CAA6D,CAAC,CAAC,CAAC;QADlE,CACkE,CAAC,CACpE;QAED,cAAQ,GAAG,IAAI,qEAAO,CAAC,CAAC,CAAC;;IA0E3B,CAAC;IAxEC,4BAAY,GAAZ,UAAa,CAAS,EAAE,KAAc;QACpC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC9D,CAAC;IAED,4BAAY,GAAZ,UAAa,KAAY,EAAE,KAAc,EAAE,cAA2B;QAAtE,iBA2BC;QA1BC,IAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO;QACtC,IAAM,qBAAqB,GAAG,wBAAwB,CAAC,MAAM,CAAC;QAC9D,IAAM,sBAAsB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5E,IAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,qBAAqB,EAAE,sBAAsB,CAAC;QACzF,IAAM,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,kBAAkB,CAAC;QACxD,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,iBAAO;YAChC,+EAAK,CAAC,OAAO,EAAE,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;QAA3D,CAA2D,CAAC;QAE9D,IAAM,eAAe,GAAG,KAAK,CAAC,WAAW;YACvC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,EAAS;oBAAR,eAAO;gBAAM,uDAAU,CAAC,YAAY,EAAE,OAAO,CAAC;YAAjC,CAAiC,CAAC;YAChE,CAAC,CAAC,EAAE;QAEN,IAAM,eAAe,GAAG,KAAK,CAAC,gBAAgB,GAAG,mFAAY,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;YACtF,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;QAEzB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,mFAAY,CAAC,sBAAsB,EACjD,KAAK,CAAC,gBAAgB,GAAG,mFAAY,CAAC,eAAe,CAAC,MAAM,CAAC;QAE/D,IAAM,eAAe,GAAG,4CAAM,CAAC,mFAAY,CAAC,eAAe,EAAE,KAAK,CAAC,gBAAgB,CAAC;aACjF,MAAM,CAAC,eAAe,CAAC;QAC1B,IAAM,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,WAAC;YACxC,IAAM,IAAI,GAAG,KAAI,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC;YACxC,OAAO,wEAAK,CAAC,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC;QACF,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC;QACvD,OAAO,EAAC,KAAK,SAAE,eAAe,mBAAE,YAAY,gBAAE,SAAS,aAAE,KAAK,SAAC;IACjE,CAAC;IAED,wBAAQ,GAAR,UAAS,KAAY;QAArB,iBAqCC;QApCC,+CAAS,CAAC,IAAI,CAAC,cAAc,EAAE,WAAC,IAAI,sDAAS,CAAC,CAAC,EAAE,WAAC,IAAI,QAAC,CAAC,KAAK,EAAE,EAAT,CAAS,CAAC,EAA5B,CAA4B,CAAC;QACjE,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;QAC7B,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,mFAAY,CAAC,sBAAsB,CAAC;QAC3E,IAAM,MAAM,GAAG,6CAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,WAAC;YAC7C,YAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,mEAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC;QAAnF,CAAmF,CAAC;QACtF,IAAM,YAAY,GAAG,0DAAM,CAAC,KAAK,CAAC,+CAAS,CAAC,MAAM,EAAE,gBAAM,IAAI,aAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC;QACnF,IAAM,YAAY,GAAG,2CAAK,CAAC,MAAM,EAAE,UAAC,MAAM,EAAE,WAAW;YACrD,IAAM,OAAO,GAAG,UAAI,CAAM,IAAK,YAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAA3C,CAA2C;YAC1E,OAAO,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAC,EAAqB;oBAApB,mBAAW,EAAE,cAAM;gBAC3D,IAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC;gBAC1C,IAAM,UAAU,GAAG,WAAW,IAAI,OAAO;oBACvC,CAAC,CAAC,EAAE;oBACJ,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAC,IAAI,QAAC,IAAI,MAAM,EAAX,CAAW,CAAC,EAAE,iBAAiB,GAAG,CAAC,CAAC;gBAC7E,IAAM,YAAY,GAAG,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kDAAY,CAAC,KAAI,CAAC,KAAK,CAAC,KAAI,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,EACnH,iBAAiB,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC5C,IAAM,aAAa,GAAG,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;gBACjF,OAAO;oBACL,WAAW;oBACX,WAAW;oBACX,MAAM;oBACN,aAAa;iBACF;YACf,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,IAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,0DAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,+CAAS;QACvE,IAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAEzD,IAAM,OAAO,GAAG,EAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,EAAC;QAEnD,IAAM,IAAI,GAAS;YACjB,MAAM;YACN,SAAS;YACT,OAAO;SACR;QACD,OAAO,IAAI;IACb,CAAC;IAEH,YAAC;AAAD,CAAC,CAnF0B,6DAAS,GAmFnC;;;;;;;;;;;;;;;;;;;;;;AClJmC;AACkB;AACZ;AACf;AACD;AAE1B,IAAM,OAAO,GAA8B;IACzC,EAAE;CACH;AAEK,IAAQ,YAAY,CAsBzB;AAtBD,WAAc,YAAY;IAEX,2BAAc,GAAG,EAAE;IACnB,2BAAc,GAAG,EAAE;IAGnB,4BAAe,GAAkB,CAAC,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC;IACtE,mCAAsB,GAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC;IAE7E,aAAa,GAAW,EAAE,OAAiB;QACzC,OAAO,4CAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,WAAC;YAC7B,UAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,2BAAc,CAAC,CAAC;gBAChD,CAAC,mEAAO,CAAC,YAAY,CAAC,CAAC,EAAE,2BAAc,CAAC,CAAC,MAAM,IAAI,CAAC;oBAClD,mEAAO,CAAC,YAAY,CAAC,CAAC,EAAE,2BAAc,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC;QAFxD,CAEwD,CACzD;IACH,CAAC;IAED;QACE,IAAM,WAAW,GAAG,OAAO,CAAC,+EAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,6DAAI,CAAC,aAAa,CAAE;QAC3F,OAAO,iDAAW,CAAC,WAAW,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,UAAG,CAAC,CAAC,EAAE,mEAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAA5B,CAA4B,CAAC;IACzE,CAAC;IAHe,qBAAQ,WAGvB;AAEH,CAAC,EAtBa,YAAY,KAAZ,YAAY,QAsBzB;;;;;;;;;;;;;;AChCD,yDAAe;IACb,gBAAgB,EAAE,8hCAA8hC;IAChjC,kBAAkB,EAAE,koCAAkoC;IACtpC,YAAY,EAAE,4pGAA4pG;IAC1qG,OAAO,EAAE,k2IAAk2I;IAC32I,MAAM,EAAE,4vFAA4vF;IACpwF,KAAK,EAAE,2nFAA2nF;IACloF,OAAO,EAAE,2wGAA2wG;CACrxG","file":"9.bundle.js","sourcesContent":["import {IGameMetaData} from \"core/logic\"\nimport {LevelOptions, ScoreOptions} from \"core/types\"\nimport {Images, Sounds, Videos} from \"./assets\"\nimport {MainComponent} from \"./components/mainComponent\"\nimport {levels} from \"./levels\"\nimport {Logic} from \"./logic\"\n\nexport const gameId = \"dossier\"\nconst scoreOptions: ScoreOptions = {\n  scoreAnswer: 100,\n  scoreBonus: 0,\n  scoreBonusPerLevel: 5\n}\n\nconst levelOptions: LevelOptions = {\n  levels,\n  levelsSeqCounts: [{seqCount: 2, maxLevel: 100}]\n}\n\nexport const metaData: IGameMetaData = {\n  gameId,\n  title: \"dossier\",\n  logic: Logic,\n  component: MainComponent,\n  scoreOptions,\n  levelOptions,\n  darkBg: true,\n  images: Images.data,\n  videos: Videos.keys,\n  sounds: Sounds.keys,\n  atlasCount: 3,\n  tutorialTaskCount: 3,\n  size: {\n    width: 2048,\n    height: 1280,\n    heightMin: 1152\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/meta.ts","import {CoreColorNumbers, CoreColors} from \"core/assets/fonts\"\nimport {Sizes} from \"core/ui/common/sizes\"\nimport {Control} from \"core/ui/controls/control\"\nimport {phaserService} from \"core/ui/services/instances\"\nimport * as Phaser from 'phaser-ce'\n\nexport class GraphicsImg extends Control {\n  img: Phaser.Sprite\n\n  constructor(private draw: (g: Phaser.Graphics) => void) {\n    super()\n    this.img = this.add(phaserService.drawSprite(draw))\n  }\n\n  updateGraphics() {\n    if (this.game) {\n      const graphics = this.game.make.graphics(0, 0)\n      this.draw(graphics)\n      this.img.loadTexture(graphics.generateTexture())\n      graphics.destroy(true)\n    }\n  }\n}\n\n\nexport class BtnDefaultImg extends GraphicsImg {\n\n  constructor(props: {\n    color: number,\n    size?: {width: number, height: number}\n  }) {\n    const size = props.size || Sizes.create({width: 500, height: 100})\n    super(g => {\n      g.beginFill(props.color)\n      g.drawRoundedRect(0, 0, size.width, size.height, size.height/2)\n    })\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ui/controls/GraphicsImg.ts","import {Sizes} from \"core/ui/common/sizes\"\nimport {Size} from \"core/ui/common/types\"\nimport {Component} from \"core/ui/components/component\"\nimport {TextOnCenterBehavior} from \"core/ui/controls/behaviors/textOnCenterBehavior\"\nimport {GraphicsImg} from \"core/ui/controls/GraphicsImg\"\n\nexport type PanelProps = { size: Size, color?: number, alpha?: number }\n\nexport class PanelComponent extends Component<PanelProps> {\n  positions = Sizes.create({\n    radius: 20,\n  })\n\n  private textBehavior: TextOnCenterBehavior\n  private control: GraphicsImg\n\n  // private control: NinePatchComponent\n\n  constructor() {\n    super()\n\n    // this.control = this.add(new NinePatchComponent(CoreImages.panelList))\n    this.control = this.add(new GraphicsImg(g => {\n      if (this.props) {\n        g.beginFill(this.props.color, this.props.alpha || 0.4)\n        g.drawRoundedRect(0, 0, this.props.size.width, this.props.size.height, this.positions.radius)\n        g.endFill()\n      }\n    }))\n  }\n\n  update() {\n  }\n\n  onPropsUpdate(): void {\n\n    this.control.updateGraphics()\n    // this.control.setSize(this.props.size)\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ui/components/games/gameUI/panelComponent.ts","import {CoreSounds} from \"core/assets\"\nimport {AssetUtl} from \"core/assets/assetUtl\"\nimport {Sys} from \"core/logic/sys\"\nimport {audioService} from \"core/services\"\nimport {GameComponentContext} from \"core/types\"\nimport {Signals} from \"core/ui/animations/signals\"\nimport {AnswerControlType} from \"core/ui/components/answers/answerControlType\"\nimport {GameComponent} from \"core/ui/components/games/gameComponent\"\nimport {Img} from \"core/ui/controls\"\nimport {screenSizeService} from \"core/ui/services/instances\"\nimport {Dev} from \"dev\"\nimport {toJS} from \"mobx\"\n\nconst bgLeftKey = \"bg_left\"\n\nconst introInterval = 2000\nconst introDelay = 300\n\nexport const durations = {\n  introAnimationDelay: 100,\n  introInterval,\n  introDelay\n}\n\nexport abstract class BaseMainGameComponent<S = {}> extends GameComponent<{}, S> {\n\n  statusOptions = {\n    offset: 0,\n    waitCompleteBeforeNewTask: false,\n  }\n\n  introOptions = {\n    disableSound: false,\n    runOnNewTaskAfter: false\n  }\n\n  initialState(): S {\n    return {} as any\n  }\n\n  answersControl = AnswerControlType.None\n\n  constructor(context: GameComponentContext) {\n    super(context)\n    context.uiService.rootComponent = this\n    context.gameState = this.initialState()\n\n    this.fixedToCamera = true\n    this.onDestroy.addOnce(() => {\n      this.context.uiService.mainComponent.onNewTask.dispose()\n      this.context.uiService.mainComponent.onAnswer.dispose()\n      audioService.stopAll()\n    })\n\n    this.onChangeForRun(\n      x => screenSizeService.screenSize,\n      x => {\n        this.cameraOffset.y = screenSizeService.topOffset\n      })\n\n  }\n\n  get cameraBottom() {\n    const bottom = screenSizeService.height - this.cameraOffset.y\n    return bottom\n  }\n\n  prepareDefaultIntroAnimation(delay = durations.introDelay) {\n    let bgLeftOffset = 0\n    let bgLeft: Img | undefined = undefined\n    if (!screenSizeService.isPortrait && AssetUtl.checkImageKey(this.gameKey(bgLeftKey))) {\n      bgLeft = this.addImage([bgLeftKey, [0, 0]])\n      const width = -bgLeft.width + 2\n      bgLeft.x = width\n      bgLeftOffset = -width\n    }\n    this.cameraOffset.x = -screenSizeService.realLeftOffset + bgLeftOffset\n    const tween = this.game.add.tween(this.cameraOffset).to(\n      {x: 0}, durations.introInterval, Phaser.Easing.Cubic.InOut, false, delay\n    )\n    if (bgLeft) {\n      tween.onComplete.addOnce(() => this.remove(bgLeft, true))\n    }\n    return tween\n  }\n\n  introAnimation(): { start: () => void, onComplete: Phaser.Signal } {\n    const tween = this.prepareDefaultIntroAnimation()\n    return tween\n  }\n\n  startIntro() {\n    if (Sys.devMode && !Dev.devModeIntro) {\n      this.context.uiService.mainComponent.onIntroComplete.dispatch()\n      return Signals.memorize()\n    }\n    if (!this.introOptions.disableSound) {\n      this.playSound(CoreSounds.intro, false, true)\n    }\n    const tween = this.introAnimation()\n    const signal = Signals.bind(this.delay(durations.introAnimationDelay), () => {\n      tween.start()\n      return tween.onComplete\n    })\n    signal.addOnce(() => this.context.uiService.mainComponent.onIntroComplete.dispatch())\n    this.disableInputOn(signal)\n    return signal\n  }\n\n  onAfterInit() {\n    this.initTaskRendering()\n  }\n\n  private initTaskRendering() {\n\n    this.onChangeFor(() => this.gameState.lastAnswer, x => {\n      this.context.uiService.mainComponent.onAnswer.dispatch(x)\n    })\n    this.onChangeFor(() => this.context.gameService.gameCycleService.state.levelTask.task,\n      x => {\n        if (this.statusOptions.waitCompleteBeforeNewTask) {\n          this.disableInputOn(this.context.uiService.answerStatus.onAnimationComplete).addOnce(() => {\n            this.callRenderNewTask(x)\n          })\n        } else {\n          this.callRenderNewTask(x)\n        }\n      })\n    this.callRenderNewTask(this.context.gameService.gameCycleService.state.levelTask.task)\n  }\n\n  private callRenderNewTask(task: any) {\n    if (this.introOptions.runOnNewTaskAfter && this.isFirstTask) {\n      this.context.uiService.mainComponent.onIntroComplete.addOnce(() => {\n        this.context.uiService.mainComponent.onNewTask.dispatch(toJS(task))\n      })\n    } else {\n      this.context.uiService.mainComponent.onNewTask.dispatch(toJS(task))\n    }\n  }\n\n  playBackgroundLoop() {\n    this.context.uiService.mainComponent.onIntroComplete.addOnce(() => this.playSound(\"bg\", true))\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ui/components/games/baseMainGameComponent.ts","import {Numbers} from \"core/utils/numbers\"\nimport {RandomGenerator} from \"core/utils/randomGenerator\"\nimport {Undef} from \"core/utils/undef\"\nimport * as _ from \"lodash\"\n\nexport class CircleSeq {\n  index = 0\n\n  constructor(private array: number[]) {}\n\n  next() {\n    const index = this.index\n    this.index = (this.index + 1) % this.array.length\n    return this.array[index]\n  }\n\n  nextArray(count: number) {\n    return _.range(count).map(() => this.next())\n  }\n}\n\nexport class UniqSeq {\n  private index = 0\n  private list: number[] = []\n\n  constructor(public max: number, private rng = new RandomGenerator()) {\n    this.reset()\n  }\n\n  checkMax(newMax: number) {\n    if (newMax != this.max) {\n      this.max = newMax\n      this.reset()\n    }\n    return this\n  }\n\n  reset() {\n    let newList = this.rng.uniqArray(this.max, this.max)\n    if (this.list.length > 0) {\n      const last = _.drop(this.list, Math.floor(this.list.length * 0.6))\n      const first = _.difference(newList, last)\n      newList = first.concat(this.rng.shuffle(last))\n    }\n    this.list = newList\n  }\n\n  private updateIndex() {\n    this.index += 1\n    if (this.index >= this.list.length) {\n      this.reset()\n      this.index = 0\n    }\n  }\n\n  nextArray(count: number) {\n    return _.range(count).map(() => this.next())\n  }\n\n  next(max?: number) {\n    if(max){\n      this.checkMax(max)\n    }\n    const v = this.list[this.index]\n    this.updateIndex()\n    return v\n  }\n\n  nextSkip(v: number): number {\n    const n = this.next()\n    if (this.list.length > 1 && n == v) {\n      return this.nextSkip(v)\n    }\n    return n\n  }\n\n  nextFrom<T>(arr: T[], skip?: T) {\n    this.checkMax(arr.length)\n    return arr[Undef.is(skip) ? this.next() : this.nextSkip(arr.indexOf(skip))]\n  }\n\n  nextSubsetFrom<T>(arr: T[], count: number) {\n    return _.range(count).map(() => this.nextFrom(arr))\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/utils/circleSeq.ts","import {CoreFonts} from \"core/assets/index\"\nimport {CoreImages} from \"core/assets/images\"\nimport {CommonAnimations} from \"core/ui/animations/commonAnimations\"\nimport {Sizes} from \"core/ui/common/sizes\"\nimport {TextAlign} from \"core/ui/common/types\"\nimport {GameComponent} from \"core/ui/components/games/gameComponent\"\nimport {PanelComponent} from \"core/ui/components/games/gameUI/panelComponent\"\nimport {Txt} from \"core/ui/controls/index\"\nimport {Btn, IconBtn} from \"core/ui/controls/btn\"\nimport {screenSizeService} from \"core/ui/services/instances\"\nimport {Undef} from \"core/utils/undef\"\n\nexport type TutorialTextProps = {\n  marginTop?: number\n  minHeight?: number,\n  stepCount?: number,\n  textAlign?: TextAlign,\n  panel?: { size?: { width?: number, height?: number }, color?: number, alpha?: number }\n}\n\nexport class TutorialTextComponent extends GameComponent<string> { //TODO rename tutrialComponent\n  positions = Sizes.create({\n    marginTop: 40,\n    textMarginX: 40,\n    padding: 80,\n    buttonMargin: 10,\n    btnWidth: 200,\n    btn: {x: 250, y: 90}\n  })\n\n  positionsPortrait = Sizes.update(this.positions, {\n    marginTop: 20,\n    textMarginX: 40,\n    padding: 40,\n  })\n\n  getPositions = () => screenSizeService.isPortrait ? this.positionsPortrait : this.positions\n\n  private text: Txt\n  private back: PanelComponent\n  private nextBtn: Btn\n  marginTop = 0\n  minHeight?: number\n  stepCount?: number\n  panel: { size?: { width?: number, height?: number }, color?: number, alpha?: number }\n\n  make(props: TutorialTextProps = {}) {\n    this.marginTop = props.marginTop || this.getPositions().marginTop\n    this.minHeight = props.minHeight\n    this.panel = props.panel || {}\n    this.back = this.add(new PanelComponent()).anchorCenterX()\n    this.text = this.add(new Txt(\"\", {...CoreFonts.tutorial(false), align: props.textAlign || \"left\"})).anchorCenter()\n    const stepCount = props.stepCount || 1\n    if (stepCount > 1) {\n      this.tutorialStore.setStepCount(stepCount)\n      this.nextBtn = this.back.add(new IconBtn(\"далее\", CoreImages.next, () => {\n        this.tutorialStore.nextTutorialState()\n      }, this.positions.buttonMargin))\n      CommonAnimations.highlight(this.nextBtn)\n      this.onChangeForRun(() => this.tutorialStore.isLastStep, isLastStep => {\n        this.nextBtn.visible = !isLastStep\n      })\n    }\n    this.onChangeForRun(() => screenSizeService.screenSize, ({width, height}) => {\n      // const btnWidth = this.nextBtn ? this.positions.btnWidth : 0\n      const btnWidth = 0\n      this.text.textControl.wordWrapWidth = screenSizeService.realWidth - this.getPositions().textMarginX * 2 - btnWidth\n      this.updateSize()\n    })\n    return this\n\n  }\n\n  updateSize() {\n    const textHeight = this.text.height + this.getPositions().padding\n    const height = this.minHeight ? Math.max(this.minHeight, textHeight) : textHeight\n\n    this.back.updatePos(Sizes.w2, this.marginTop - screenSizeService.topOffset)\n    const width = Undef.map(this.panel.size, x => x.width) || screenSizeService.realWidth - this.getPositions().padding\n    this.back.setProps({...this.panel, size: {width, height}})\n\n    this.text.updatePos(Sizes.w2, this.back.height / 2 + this.back.y)\n    this.text.updatePivot()\n    this.back.visible = !!this.text.text\n    if (this.nextBtn) {\n      this.nextBtn.updatePos(this.back.width - this.positions.btn.x, this.back.height - this.positions.btn.y)\n    }\n    this.back.updatePivot()\n  }\n\n  onPropsUpdate(): void {\n    this.text.text = this.props\n    this.updateSize()\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ui/components/games/gameUI/tutorialTextComponent.ts","import {CoreColors, CoreFonts} from \"core/assets/fonts\"\nimport {ImagesMetaData} from \"core/types\"\nimport {Feature} from \"games/mnemonics/dossier/logic\"\nimport * as _ from 'lodash'\n\nexport module Sounds {\n  export const keys: string[] = []\n}\n\nexport module Translations {\n  export const remember = \"remember\"\n  export const tutor1 = \"tutor1\"\n  export const tutor2 = \"tutor2\"\n}\n\nexport module Videos {\n  export const keys = [\"intro\"]\n}\n\nexport module Fonts {\n  export const yellow = 0x7A46D3\n\n  export const part = {\n    fontSize: 30, font: CoreFonts.MontserratSemiBold, fill: CoreColors.black\n  }\n  export const partName = {\n    fontSize: 25, font: CoreFonts.MontserratSemiBold, fill: CoreColors.black, align: \"center\"\n  }\n  export const answer = {\n    fontSize: 25, font: CoreFonts.MontserratSemiBold, fill: CoreColors.black, align: \"center\"\n  }\n}\n\nexport module Images {\n  export const bg = \"bg\"\n  export const podloshka = \"podloshka\"\n  export const empty = \"empty\"\n  export const line = \"line\"\n  export const intro = (index: number) => \"intro_\" + index\n  export const plashka = (index: number) => \"plashka_\" + index\n  export const part = (feature: Feature, isMan: boolean, hairColor: string, index: number) => {\n    const manPart = isMan ? \"man\" : \"woman\"\n    const colorPart = _.includes([\"hair\", \"beard\"], feature) ? hairColor : \"\"\n    return [feature, colorPart, manPart].filter(x => x != \"\").join(\"_\") + \"_\" + index\n  }\n  export const data: ImagesMetaData = {\n    sprites: []\n  }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/assets.ts","import {CoreColorNumbers} from \"core/assets/fonts\"\nimport {Sizes} from \"core/ui/common/sizes\"\nimport {GameComponent} from \"core/ui/components/games/gameComponent\"\nimport {HightlightBehavior} from \"core/ui/controls/behaviors/highlightBehavior\"\nimport {Control} from \"core/ui/controls/control\"\nimport {ControlUtl} from \"core/ui/controls/controlUtl\"\nimport {GraphicsImg} from \"core/ui/controls/GraphicsImg\"\nimport {Txt} from \"core/ui/controls/txt\"\nimport {Arrays} from \"core/utils/arrays\"\nimport {Strings} from \"core/utils/strings\"\nimport {tuple} from \"core/utils/tuples\"\nimport {Fonts, Images} from \"games/mnemonics/dossier/assets\"\nimport {PersonComponent} from \"games/mnemonics/dossier/components/personComponent\"\nimport {DossierWords} from \"games/mnemonics/dossier/words\"\nimport {Person} from \"../logic\"\nimport DossierPart = DossierWords.DossierPart\n\nexport class DossierComponent extends GameComponent<Person> {\n\n  positions = Sizes.create({\n    podloshka: {x: 5},\n    lineSize: {width: 592},\n    lineWidth: 2,\n    lineOffset: {y: -8},\n    infoOffset: 200,\n    marginLine: {x: 5},\n    person: {y: 40},\n    dossier: {y: 570},\n  })\n\n  podloshka = this.addImage(Images.podloshka).anchorCenterX().setPos(this.positions.podloshka)\n  person = this.add(this.createComponent(PersonComponent)).setPos(this.positions.person).anchorCenterX()\n  dossierPartsGroup = this.add(new Control()).setPos(this.positions.dossier).anchorCenter()\n\n  private partNames: Txt[]\n  private parts: Txt[]\n\n  hightlightPart(part: DossierPart) {\n    this.partNames.forEach(text => {\n      text.getBehavior(HightlightBehavior).enableHighlight(text.tag == part)\n    })\n  }\n\n  hideParts() {\n\n    this.person.setProps({person: this.props, isQuestion: true})\n    this.parts.forEach(x => x.visible = false)\n  }\n\n  showPart(part: DossierPart) {\n    ControlUtl.findByTag(this.parts, part).visible = true\n  }\n\n  onPropsUpdate() {\n    this.person.setProps({person: this.props, isQuestion: false})\n    this.dossierPartsGroup.removeAll(true)\n    const [groups, partNames, parts] = Arrays.unzip3(this.props.dossierParts.map(([part, value]) => {\n      const group = this.dossierPartsGroup.add(new Control())\n      const info = group.add(new Txt(Strings.splitByLinesAndJoin(value, 20), Fonts.part))\n        .fluentUpdate(x => x.tag = part).updatePos(this.positions.infoOffset, 0)\n      const name = group.add(new Txt(this.translate(part), Fonts.partName))\n        .addBehavior(new HightlightBehavior())\n        .fluentUpdate(x => x.tag = part).anchorOneY().updatePos(0, info.height)\n      const line = new GraphicsImg(g => {\n        g.lineStyle(this.positions.lineWidth, CoreColorNumbers.black, 0.4)\n        g.lineTo(this.positions.lineSize.width, 0)\n      })\n      group.add(line).updatePos(0, info.height + this.positions.lineOffset.y)\n      // group.add(this.makeImage(Images.line).updatePos(0, info.height))\n      return tuple(group, name, info)\n    }))\n    this.partNames = partNames\n    this.parts = parts\n\n    Sizes.tableColumn(groups, this.positions.marginLine)\n    this.dossierPartsGroup.updatePivot()\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/components/dossierComponent.ts","import {Sizes} from \"core/ui/common/sizes\"\nimport {GameComponent} from \"core/ui/components/games/gameComponent\"\nimport {Control} from \"core/ui/controls/control\"\nimport {Images} from \"games/mnemonics/dossier/assets\"\nimport {Person} from \"../logic\"\n\nexport class PersonComponent extends GameComponent<{ person: Person, isQuestion: boolean }> {\n\n  positions = Sizes.create({})\n  bg = this.addImage(Images.empty)\n  group = this.add(new Control())\n\n  onPropsUpdate() {\n    this.group.removeAll(true)\n    const person = this.props.person\n    const parts = this.props.isQuestion && person.partsOnQuestion.length > 0\n      ? person.partsOnQuestion : person.parts\n    parts.forEach(([feature, index]) => {\n      this.group.add(this.makeImage(Images.part(feature, person.isMan, person.hairColor, index)))\n    })\n    this.group.refreshCacheAsBitmap()\n    this.updatePivot()\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/components/personComponent.ts","import {htmlVideoService} from \"core/services/instances\"\nimport {CommonAnimations} from \"core/ui/animations/commonAnimations\"\nimport {Signals} from \"core/ui/animations/signals\"\nimport {Sizes} from \"core/ui/common/sizes\"\nimport {BaseMainGameComponent} from \"core/ui/components/games/baseMainGameComponent\"\nimport {TutorialTextComponent} from \"core/ui/components/games/gameUI/tutorialTextComponent\"\nimport {OnInit} from \"core/ui/components/onInit\"\nimport {ControlUtl} from \"core/ui/controls/controlUtl\"\nimport {Video} from \"core/ui/controls/video\"\nimport {IntroComponent} from \"games/mnemonics/dossier/components/introComponent\"\nimport {RememberComponent} from \"games/mnemonics/dossier/components/rememberComponent\"\nimport {Images, Translations} from \"../assets\"\nimport {Task} from '../logic'\nimport {QuestionComponent} from './questionComponent'\n\nconst durations = {\n  intro: 800\n}\n\nexport class MainComponent extends BaseMainGameComponent implements OnInit {\n  positions = Sizes.create({\n    statusOffset: -200,\n    margin: {x: 10}\n  })\n\n  biPositions = Sizes.bi({\n    question: {x: Sizes.widthNormal / 2, y: 180},\n    remember: {x: Sizes.widthNormal / 2, y: 200},\n    btn: {x: 800, y: 1000},\n  }, {\n    question: {x: Sizes.widthNormal / 2, y: 140},\n    remember: {x: Sizes.widthNormal / 2, y: 220},\n    btn: {x: 800, y: 1000},\n  })\n\n  bg = this.addImage(Images.bg)\n\n  remember = this.add(this.createComponentWithProps(RememberComponent, {onComplete: () => this.onComplete()}))\n    .setBiPos(this.biPositions.remember)\n    .fluentUpdate(x => x.visible = false)\n  question = this.add(this.createComponent(QuestionComponent)).setBiPos(this.biPositions.question)\n    .fluentUpdate(x => x.visible = false)\n\n  tutorial: TutorialTextComponent\n\n  updateState(rememberState: boolean) {\n    this.remember.visible = rememberState\n    this.question.visible = !rememberState\n    if (this.tutorial) {\n      this.tutorial.setProps(this.translate(rememberState ? Translations.tutor1 : Translations.tutor2))\n    }\n  }\n\n  onComplete() {\n    this.updateState(false)\n  }\n\n  // introAnimation(): { start: () => void; onComplete: Phaser.Signal } {\n  //   const intro = this.add(this.createComponent(IntroComponent))\n  //   return {\n  //     start: () => {\n  //       intro.start()\n  //     },\n  //     onComplete: Signals.bind(this.delay(durations.intro), () => {\n  //       return ControlUtl.hideAndDestroy(intro)\n  //     })\n  //   }\n  // }\n  introAnimation(): { start: () => void; onComplete: Phaser.Signal } {\n    return {\n      start: () => {\n        htmlVideoService.play(this.gameKey(\"intro\"))\n      },\n      onComplete: Signals.bind(this.delay(5000), () => {\n        htmlVideoService.stop(this.gameKey(\"intro\"))\n        return Signals.memorize()\n      })\n    }\n\n    // return {\n    //   start: () => {\n    //   },\n    //   onComplete: Signals.memorize()\n    // }\n  }\n\n  onInit(): void {\n    this.introOptions.runOnNewTaskAfter = true\n    this.statusOptions.offset = this.positions.statusOffset\n    this.statusOptions.waitCompleteBeforeNewTask = true\n    this.startIntro()\n    if (this.isTutorial) {\n      this.tutorial = this.add(this.createComponent(TutorialTextComponent).make())\n    }\n  }\n\n  onNewTask(task: Task) {\n    this.updateState(true)\n  }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/components/mainComponent.ts","import {Sizes} from \"core/ui/common/sizes\"\nimport {GameComponent} from \"core/ui/components/games/gameComponent\"\nimport {OnInit} from \"core/ui/components/onInit\"\nimport {HightlightBehavior} from \"core/ui/controls/behaviors/highlightBehavior\"\nimport {Btn} from \"core/ui/controls/btn\"\nimport {Control} from \"core/ui/controls/control\"\nimport {BtnDefaultImg} from \"core/ui/controls/GraphicsImg\"\nimport {DossierComponent} from \"games/mnemonics/dossier/components/dossierComponent\"\nimport {PersonComponent} from \"games/mnemonics/dossier/components/personComponent\"\nimport {Fonts, Translations} from \"../assets\"\nimport {Task} from '../logic'\n\nconst durations = {}\n\nexport class RememberComponent extends GameComponent<{ onComplete: () => {} }> implements OnInit {\n  positions = Sizes.create({\n    margin: {x: 120, y: 20}\n  })\n\n  biPositions = Sizes.bi({\n    btn: {y: 910},\n    dossier: {x: 5, y: 460},\n  }, {\n    btn: {y: 966},\n    dossier: {x: 5, y: 530},\n  })\n\n  peopleGroup = this.add(new Control())\n    .fluentUpdate(x => x.symmetricScale = 0.4)\n    .anchorCenter().fluentUpdate(x => x.visible = !this.isTutorial)\n\n  dossier = this.add(this.createComponent(DossierComponent)).anchorCenter().setBiPos(this.biPositions.dossier)\n\n  rememberBtn = this.add(new Btn(this.translate(Translations.remember),\n    () => this.onRemember(), undefined, new BtnDefaultImg({\n      color: Fonts.yellow,\n    }))).anchorCenter().setBiPos(this.biPositions.btn)\n  private people: PersonComponent[]\n\n  onRemember() {\n    this.index += 1\n    this.updateDossier()\n  }\n\n  onInit(): void {\n    this.onOrientationChange(() => this.updatePositions())\n  }\n\n  index = 0\n\n  updateDossier() {\n    const task = this.getCurrentTask<Task>()\n    const person = task.people[this.index]\n    this.people.forEach((p, i) => p.alpha = i == this.index ? 1 : 0.3)\n    if (person) {\n      this.dossier.setProps(person)\n    } else {\n      this.props.onComplete()\n    }\n  }\n\n  updatePositions() {\n    const colCount = this.isPortrait ? 4 : 8\n    Sizes.tableFromList(this.people, colCount, this.positions.margin)\n    this.peopleGroup.updatePivot()\n    this.dossier.updatePivot()\n  }\n\n  onNewTask(task: Task) {\n    this.peopleGroup.removeAll(true)\n    this.index = 0\n    this.people = task.people.map(person => this.peopleGroup.add(\n      this.createComponentWithProps(PersonComponent, {\n        person,\n        isQuestion: false\n      })).addBehavior(new HightlightBehavior()))\n    this.updateDossier()\n    this.updatePositions()\n  }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/components/rememberComponent.ts","import {AnswerStatus, ILastAnswer} from \"core/types/logic\"\nimport {Sizes} from \"core/ui/common/sizes\"\nimport {GameComponent} from \"core/ui/components/games/gameComponent\"\nimport {OnInit} from \"core/ui/components/onInit\"\nimport {ImageBtn} from \"core/ui/controls/btn\"\nimport {Control} from \"core/ui/controls/control\"\nimport {Txt} from \"core/ui/controls/txt\"\nimport {Strings} from \"core/utils/strings\"\nimport {Fonts, Images} from \"games/mnemonics/dossier/assets\"\nimport {DossierComponent} from \"games/mnemonics/dossier/components/dossierComponent\"\nimport {Question, Task} from \"../logic\"\n\nconst durations = {\n  delay: 500\n}\n\nexport class QuestionComponent extends GameComponent implements OnInit {\n\n  positions = Sizes.create({\n    margin: {x: 10},\n    tutorialOffset: 60,\n  })\n\n  biPositions = Sizes.bi({\n    answer: {y: 880},\n  }, {\n    answer: {y: 930},\n  })\n\n  text = this.add(new Txt(\"\"))\n\n  dossierList: DossierComponent[]\n\n  dossierGroup = this.add(new Control()).updatePos(0, this.isTutorial ? this.positions.tutorialOffset : 0)\n  answersGroup = this.add(new Control()).anchorCenter().setBiPos(this.biPositions.answer)\n  private answers: ImageBtn[]\n\n  updatePositions() {\n    const colCount = this.isPortrait ? 2 : 4\n    Sizes.tableFromList(this.answers, colCount, this.positions.margin)\n    this.answersGroup.updatePivot()\n  }\n\n  showQuestion(question: Question) {\n    const dossier = this.dossierList[question.personIndex]\n    dossier.visible = true\n    dossier.hightlightPart(question.dossierPart)\n    this.answersGroup.removeAll(true)\n    this.answers = question.answerOptions.map((answer, i) => {\n      const btn = this.answersGroup.add(new ImageBtn(\n        Strings.splitByLinesAndJoin(answer, 15), this.gameKey(Images.plashka(i)), () => {\n        }, Fonts.answer))\n      return this.addAnswerBehavior(btn, answer, {location: \"top\", dark: true})\n    })\n    this.updatePositions()\n    this.answersAreReady()\n  }\n\n  onAnswer(answer: ILastAnswer): void {\n    const task = answer.levelTask.task as Task\n    const index = answer.correctAnswerIndex || 0\n    const prevQuestion = task.questions[index]\n    this.dossierList[prevQuestion.personIndex].showPart(prevQuestion.dossierPart)\n    if (answer.status == AnswerStatus.CorrectPartial) {\n\n      this.disableInputOn(this.delay(durations.delay)).addOnce(() => {\n        this.dossierList[prevQuestion.personIndex].visible = false\n        const question = task.questions[index + 1]\n        this.showQuestion(question)\n      })\n    }\n\n  }\n\n  onNewTask(task: Task): void {\n    this.dossierGroup.removeAll(true)\n    this.dossierList = task.people.map(person =>\n      this.dossierGroup.add(this.createComponentWithProps(DossierComponent, person)).fluentUpdate(x => {\n        x.hideParts()\n        x.visible = false\n      }))\n    this.showQuestion(task.questions[0])\n  }\n\n  onInit(): void {\n    this.onOrientationChange(() => this.updatePositions())\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/components/questionComponent.ts","import {createLevelsFromArray} from \"core/types/logic\"\n\nexport interface Level {\n  peopleCount: number\n  dossierPartCount: number\n  sameGender: boolean,\n  randomOrder: boolean,\n  hideFeature: boolean\n}\n\nfunction level(\n  peopleCount: number,\n  dossierPartCount: number,\n  sameGender: boolean,\n  randomOrder: boolean,\n  hideFeature: boolean,\n): Level {\n  return {peopleCount, dossierPartCount, sameGender, randomOrder, hideFeature}\n}\n\nexport const levels = createLevelsFromArray([\n  level(2, 1, false, false, false),\n  level(3, 1, false, false, false),\n  level(2, 2, false, false, false),\n  level(2, 3, false, false, false),\n  level(3, 2, true, false, false),\n  level(4, 2, false, false, false),\n  level(3, 3, false, false, false),\n  level(3, 3, true, false, false),\n  level(3, 3, false, true, false),\n  level(4, 3, false, false, false),\n  level(5, 3, true, false, false),\n  level(5, 4, false, false, false),\n  level(5, 4, false, true, false),\n  level(6, 4, false, false, true),\n  level(6, 4, true, false, true),\n  level(7, 4, false, true, true),\n  level(7, 4, true, true, true),\n  level(8, 4, false, false, true),\n  level(8, 4, true, false, true),\n  level(8, 4, false, true, true),\n  level(8, 4, true, true, true),\n])\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/levels.ts","import {GameLogic} from \"core/logic\"\nimport {Arrays, RandomGenerator} from \"core/utils\"\nimport {UniqSeq} from \"core/utils/circleSeq\"\nimport {Numbers} from \"core/utils/numbers\"\nimport {tuple} from \"core/utils/tuples\"\nimport {DossierWords} from \"games/mnemonics/dossier/words\"\nimport * as _ from 'lodash'\nimport {Level} from \"./levels\"\nimport DossierPart = DossierWords.DossierPart\n\nconst answerOptionCount = 4\n\nexport type Feature = \"head\" | \"hair\" | \"clothes\" | \"beard\" | \"hat\" | \"glass\"\nconst allFeatures: Feature[] = [\"head\", \"hair\", \"clothes\", \"beard\", \"hat\", \"glass\"]\nconst nameKey = \"personname\"\n\nconst maxFeatureCount: Record<string, Record<Feature, number>> = {\n  man: {\n    beard: 24,\n    clothes: 7,\n    hat: 7,\n    head: 8,\n    hair: 12,\n    glass: 6\n  },\n  woman: {\n    beard: 0,\n    clothes: 9,\n    hat: 5,\n    head: 8,\n    hair: 12,\n    glass: 6\n  }\n}\nconst mainFeatures: Feature[] = [\"head\", \"clothes\", \"hair\"]\nconst genderAdditionalFeatures: Record<string, Feature[]> = {\n  man: [\"hat\", \"beard\"],\n  woman: [\"hat\", \"glass\"]\n}\ntype HairColor = \"black\" | \"brown\" | \"gray\" | \"orange\" | \"white\"\nconst allHairColors: HairColor[] = [\"black\", \"brown\", \"gray\", \"orange\", \"white\"]\n\nexport type Question = {\n  personIndex: number\n  dossierPart: DossierPart\n  answer: string\n  answerOptions: string[]\n}\n\nexport type Person = {\n  isMan: boolean\n  hairColor: HairColor\n  parts: [Feature, number][],\n  partsOnQuestion: [Feature, number][],\n  dossierParts: [DossierPart, string][]\n}\n\nexport type Task = {\n  people: Person[]\n  questions: Question[]\n  answers: { seq: string[] }\n}\n\nexport class Logic extends GameLogic<Task, Level> {\n  rng = new RandomGenerator()\n  words = DossierWords.getWords()\n  wordSeqList = _.mapValues(this.words, () => new UniqSeq(0))\n  featureSeqList = _.fromPairs([\"man\", \"woman\"].map(manKey =>\n    tuple(manKey, _.fromPairs(allFeatures.map(feature =>\n      tuple(feature, new UniqSeq(maxFeatureCount[manKey][feature]))))))\n  )\n\n  colorSeq = new UniqSeq(0)\n\n  fullPartName(x: string, isMan: boolean) {\n    return x + (x == nameKey ? (isMan ? \"_man\" : \"_woman\") : \"\")\n  }\n\n  createPerson(level: Level, isMan: boolean, additionalPart: DossierPart): Person {\n    const manKey = isMan ? \"man\" : \"woman\"\n    const allAdditionalFeatures = genderAdditionalFeatures[manKey]\n    const additionalFeatureCount = this.rng.int(allAdditionalFeatures.length, 1)\n    const additionalFeatures = this.rng.subset(allAdditionalFeatures, additionalFeatureCount)\n    const features = mainFeatures.concat(additionalFeatures)\n    const parts = features.map(feature =>\n      tuple(feature, this.featureSeqList[manKey][feature].next()))\n\n    const partsOnQuestion = level.hideFeature\n      ? parts.filter(([feature]) => _.includes(mainFeatures, feature))\n      : []\n\n    const additionalParts = level.dossierPartCount - DossierWords.allDossierParts.length > 0\n      ? [additionalPart] : []\n\n    this.rng.subset(DossierWords.additionalDossierParts,\n      level.dossierPartCount - DossierWords.allDossierParts.length)\n\n    const allDossierParts = _.take(DossierWords.allDossierParts, level.dossierPartCount)\n      .concat(additionalParts)\n    const dossierParts = allDossierParts.map(x => {\n      const name = this.fullPartName(x, isMan)\n      return tuple(x, this.wordSeqList[name].nextFrom(this.words[name]))\n    })\n    const hairColor = this.colorSeq.nextFrom(allHairColors)\n    return {parts, partsOnQuestion, dossierParts, hairColor, isMan}\n  }\n\n  nextTask(level: Level) {\n    _.forEach(this.featureSeqList, x => _.forEach(x, y => y.reset()))\n    const isMan = this.rng.bool()\n    const additionalPart = this.rng.sample(DossierWords.additionalDossierParts)\n    const people = _.range(level.peopleCount).map(i =>\n      this.createPerson(level, level.sameGender ? isMan : Numbers.odd(i), additionalPart))\n    const dossierParts = Arrays.group(_.flatMap(people, person => person.dossierParts))\n    const allQuestions = _.map(people, (person, personIndex) => {\n      const shuffle = <T>(x: T[]) => level.randomOrder ? this.rng.shuffle(x) : x\n      return shuffle(person.dossierParts).map(([dossierPart, answer]) => {\n        const allParts = dossierParts[dossierPart]\n        const otherParts = dossierPart == nameKey\n          ? []\n          : this.rng.subset(allParts.filter(x => x != answer), answerOptionCount - 1)\n        const otherOptions = this.rng.subset(_.difference(this.words[this.fullPartName(dossierPart, person.isMan)], allParts),\n          answerOptionCount - otherParts.length - 1)\n        const answerOptions = this.rng.shuffle([answer].concat(otherParts, otherOptions))\n        return {\n          dossierPart,\n          personIndex,\n          answer,\n          answerOptions\n        } as Question\n      })\n    })\n\n    const flatten = level.randomOrder ? Arrays.flattenTranspose : _.flatten\n    const questions = flatten(this.rng.shuffle(allQuestions))\n\n    const answers = {seq: questions.map(x => x.answer)}\n\n    const task: Task = {\n      people,\n      questions,\n      answers\n    }\n    return task\n  }\n\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/logic.ts","import {Cnst} from \"core/logic/cnst\"\nimport {settingService} from \"core/services/instances\"\nimport {Strings} from \"core/utils/strings\"\nimport * as _ from 'lodash'\nimport ru from \"./wordsRu\"\n\nconst wordsDB: Record<string, typeof ru> = {\n  ru\n}\n\nexport module DossierWords {\n\n  export const maxLength2line = 20\n  export const maxLength3line = 15\n  export type DossierPart = \"personname\" | \"profession\" | \"hobby\" | \"food\" | \"dream\" | \"pet\"\n\n  export const allDossierParts: DossierPart[] = [\"personname\", \"profession\", \"hobby\"]\n  export const additionalDossierParts: DossierPart[] = [\"food\", \"dream\", \"pet\"]\n\n  function fix(key: string, strings: string[]) {\n    return _.uniq(strings).filter(x =>\n      key == \"profession\" ? x.length <= maxLength2line :\n        (Strings.splitByLines(x, maxLength2line).length <= 2 &&\n          Strings.splitByLines(x, maxLength3line).length <= 3)\n    )\n  }\n\n  export function getWords(): Record<string, string[]> {\n    const localeWords = wordsDB[settingService.settings.locale] || wordsDB[Cnst.defaultLocale]!\n    return _.mapValues(localeWords, (v, k) => fix(k, Strings.splitTrim(v)))\n  }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/words.ts","export default {\n  \"personname_man\": \"Александр,Саша,Андриан,Арнольд,Артём,Алексей,Алёша,Лёша,Альфред,Анатолий,Толя,Артемий,Адам,Алан,Альберт,Антон,Аркадий,Арсений,Артур,Афанасий,Адонис,Алевтин,Андрей,Антоний,Аполлон,Архип,Артур,Богдан,Борис,Боря,Бруно,Борислав,Бернард,Варлам,Владимир,Володя,Вова,Вячеслав,Вадим,Виктор,Витя,Влад,Владислав,Валентин,Вениамин,Веня,Валерий,Валера,Вильям,Виталий,Гавриил,Гайдар,Габриель,Георгий,Гоша,Глеб,Гарри,Генри,Григорий,Гриша,Геннадий,Гена,Давид,Джон,Данила,Дмитрий,Дима,Денис,Добрыня,Дионис,Евгений,Женя,Егор,Елисей,Захар,Икар,Ипполит,Игорь,Игнат,Иннокентий,Иван,Ваня,Иосиф,Илья,Карен,Карл,Камиль,Константин,Костя,Кузьма,Кузя,Кирилл,Кристоф,Клим,Лев,Леон,Леонард,Людвиг,Леонид,Лёня,Леопольд,Лео,Макс,Максим,Марк,Макар,Марат,Михаил,Миша,Матвей,Мефодий,Николай,Коля,Никита,Олег,Павел,Паша,Пётр,Петя,Прохор,Рафаэль,Родион,Ричард,Рональд,Ренат,Роланд,Роман,Рома,Руслан,Роберт,Савелий,Сава,Семён,Слава,Степан,Стёпа,Стефан,Сергей,Серёжа,Станислав,Стас,Тимофей,Тимур,Томас,Фёдор,Фома,Филипп,Чарльз,Эдвард,Эдмонд,Эдуард,Эдгар,Эрнест,Эдмунд,Эрик,Юрий,Юра,Ярослав\",\n  \"personname_woman\": \"Аврора,Агата,Аглая,Аделина,Адель,Адриана,Аксинья,Алевтина,Александра,Алена,Лена,Елена,Алина,Алиса,Алла,Альбина,Аля,Амелия,Анастасия,Настя,Ангелина,Анжела,Анжелика,Анна,Аня,Антонина,Тоня,Анфиса,Полина,Арина,Ассоль,Ася,Белла,Берта,Валентина,Валя,Валерия,Лера,Варвара,Василина,Василиса,Вера,Вероника,Виктория,Вика,Галина,Галя,Глория,Грета,Даниэла,Дарина,Дарья,Даша,Дебора,Дженнифер,Джессика,Джулия,Диана,Дина,Дора,Ева,Евгения,Женя,Екатерина,Катя,Елизавета,Лиза,Есения,Жанна,Жасмин,Злата,Зоя,Изабелла,Изольда,Илона,Инга,Инна,Ирина,Ира,Карина,Каролина,Кира,Клара,Кристина,Ксения,Ксюша,Лана,Лара,Лариса,Лаура,Леся,Лидия,Лилия,Лина,Линда,Лия,Лола,Лолита,Лора,Луиза,Людмила,Майя,Маргарита,Марго,Рита,Марина,Мария,Маша,Марта,Маруся,Марфа,Матильда,Милана,Мира,Мирослава,Моника,Мэри,Надежда,Надя,Наталья,Наташа,Нелли,Ника,Николь,Нина,Нора,Оксана,Олеся,Оливия,Ольга,Оля,Офелия,Пелагея,Раиса,Регина,Рема,Рената,Римма,Роза,Роксана,Сабина,Сабрина,Самира,Сандра,Сара,Светлана,Света,Снежана,Соня,София,Таисия,Тамара,Татьяна,Таня,Тереза,Тина,Ульяна,Фаина,Фелиция,Хилари,Хлоя,Шарлотта,Шелли,Шерил,Эвелина,Элеонора,Элиза,Элла,Эля,Эмма,Эмили,Эрика,Юлия,Юля,Юна,Яна,Ярослава\",\n  \"profession\": \"Event-менеджер,SEO-оптимизатор,SMM-менеджер,Авиадиспетчер,Авиационный техник,Судоремонтник,Автомеханик,Агроинженер,Агроном,Фермер,Адвокат,Администратор БД,Актер,Актер театра,Оперный актер,Актер балета,Арт-директор,Архитектор ПО,Архитектор,Промышленный дизайнер,Аудитор,Банковский служащий,Бармен,Банкир,Бизнес-тренер,Биоинженер,Биоинформатик,Биолог,Почвовед,Биохимик,Микробиолог,Бренд-менеджер,Брокер,Трейдер,Бухгалтер,Веб-дизайнер,Верстальщик,Ветеринарный врач,Военнослужащий,Врач общей практики,Семейный доктор,Врач скорой помощи,Хирург,Врач-диагност,Врач-стоматолог,Врач-терапевт,Гейм-дизайнер,Генетик,Географ,Метеоролог,Геолог,Горный инженер,Гид,Экскурсовод,Переводчик,Градостроитель,Графический дизайнер,Аниматор,Декоратор,Дизайнер,Модельер,Делопроизводитель,Дефектолог,Дизайнер-макетчик,Дипломат ,Дошкольный педагог,Воспитатель,Журналист,Звукорежиссер,Зоолог,Кинолог,Инженер по качеству,Геодезист,Инженер-испытатель,Космонавт-испытатель,Инженер-конструктор,Инженер-металлург,Инженер-проектировщик,Инженер-робототехник,Инженер-строитель,Инженер-технолог,Инженер-химик,Инженер-эколог,Инженер-электронщик,Инженер-энергетик,Инструктор по туризму,Историк,Искусствовед,Культуролог,Каскадер,Постановщик трюков,Продавец,Конфликтолог,Копирайтер,Корректор,Косметолог,Коуч,Кризис-менеджер,Риск-менеджер,Ландшафтный дизайнер,Логист,Логопед,Маркетолог,Математик,Машинист электропоезда,Менеджер,Менеджер по персоналу,Менеджер по продажам,Аккаунт-менеджер,Менеджер по рекламе,Механик автосервиса,Налоговый инспектор,Нанотехнолог,Нейробиолог,Нейрофизиолог,Нотариус,Оператор ,Педагог,Переводчик-филолог,Печатник,Пилот,Штурман,Судоводитель,Повар-кондитер,Политолог,Философ,Программист,Продюсер,Проектировщик интерфейсов,Проектный менеджер,Предприниматель,Психолог-консультант,Редактор,Режиссер,Риелтор,Секретарь-референт,Сервисный инженер,Сетевой врач,Системный администратор,Системный аналитик,Следователь,Социальный работник,Социолог-статистик,Спасатель МЧС,Охранник,Стилист,Имиджмейкер,Парикмахер,Визажист,Сценарист,Таможенник,Телерадиоведущий,Телеведущий,Радиоведущий,Тестировщик ПО,Технический писатель,Технолог,Биотехник,Товаровед,Тренер,Фармацевт,Провизор,Физик,Биофизик,Финансовый аналитик,Финансовый консультант,Флорист,Декоратор,Цветовод,Фотограф,Видеооператор,Художник,Эколог,Аналитик,Экономист,Риелтор,Электрик,Ювелир,Юрист,Администратор гостиницы,Администратор ресторана,Администратор сайта,Архитектор,Астроном,Визажист,Востоковед,Главный бухгалтер,Главный редактор,Гример,Дегустатор,Грумер,Диетолог,Диджей,Дипломат,Зубной техник,Имиджмейкер,Инструктор по вождению,Картограф,Киновед,Кондитер,Корректор,Косметолог,Контент-менеджер,Криминалист,Критик,Лоббист,Логист,Массажист,Мастер по маникюру,Менеджер по развитию,Мерчендайзер,Менеджер проекта,Налоговый инспектор,Модельер,Мультипликатор,Налоговый консультант,Океанолог,Оператор ПК,Ортопед,Парикмахер,Пожарный,Политолог,Полицейский,Пресс-атташе,Провизор,Помощник бухгалтера,Прокурор,Редактор книг,Реабилитолог,Рекламный агент,Рекрутер,Ресторатор,Секретарь-референт,Риелтор,Сварщик,Следователь,Спичрайтер,Стилист,Страховой агент,Судья,Таможенник,Финансовый директор,Финансовый менеджер,Шеф-повар,Хореограф,Издатель,Диктор,Иммунолог,Кардиолог,Фельдшер,Ректор,Почтальон,Детектив\",\n  \"hobby\": \"Играет в настольный теннис,Увлекается фотографией,Любит слушать музыку,Играет на электрогитаре,Играет на акустической гитаре,Пробует разные виды сыра,Катается на велосипеде,Рисует красками,Ходит в танцевальную школу,Играет в шахматы,Любит гулять с собакой,Играет на саксофоне,Играет в театре,Ловит рыбу,Любит рыбачить,Любит ходить на рыбалку,Бегает по утрам,Участвует в соревнованиях,Играет на скрипке,Поет в караоке,Любит путешествовать,Смотрит телевизор,Следит за новостями,Играет в компьютерные игры,Собирает пазлы,Катается на скейтборде,Играет в большой теннис,Ходит в тренажерный зал,Занимается тяжелой атлетикой,Катается на роликах,Увлекается фокусами,Занимается фитнесом,Ходит в солярий,Подтягивается на турнике,Бегает по вечерам,Ходит в лес за грибами,Посещает фотовыставки,Изучает каллиграфию,Коллекционирует марки,Рисует на воде,Коллекционирует монеты,Занимается резьбой по книгам,Занимается резьбой по дереву,Участвует в реконструкциях,Занимается садоводством,Увлекается чтением,Медитирует,Увлекается медитацией,Ведет персональный блог,Занимается командным спортом,Проходит онлайн-курсы,Увлекается изучением языков,Делает оригами,Занимается карате,Ходит в бассейн,Играет в бильярд,Играет в пейнтбол,Занимается дайвингом,Изучает программирование,Играет в настольные игры,Катается на лыжах,Играет в футбол,Наблюдает за звездами,Играет в пляжный волейбол,Играет на барабанах,Играет на пианино,Занимается йогой,Любит пешие прогулки,Занимается плаванием,Играет в боулинг,Играет в гольф,Занимается боксом,Ходит в кинотеатр,Играет в стритбол,Пишет стихи,Пишет прозу,Занимается программированием,Прыгает с парашютом,Прыгает с тарзанкой,Увлекается туризмом,Наблюдает за птицами,Увлекается археологией,Создает музыку на компьютере,Занимается видеосъемкой,Любит есть мороженое,Занимается созданием сайтов,Любит вязание и вышивку,Занимается резьбой по дереву,Увлекается выжиганием по дереву,Изучает кухни разных стран,Коллекционирует открытки,Коллекционирует календари,Занимается виноделием,Увлекается ландшафтным дизайном,Подрабатывает флористом,Занимается разведением рыбок,Любит играть в шашки,Составляет кроссворды,Участвует в соревнованиях по шахматам,Занимается изучением наук,Изучает историю,Увлекается астрологией,Придумывает различные тесты,Занимается гаданием на картах,Обожает журналистику,Изучает эльфийский язык,Осваивает диетическую кулинарию,Разрабатывает оригинальные рецепты,Создает развивающие игрушки,Устраивает онлайн-семинары,Посещает курсы самообразования,Устраивает мастер-классы,Держит дома крокодила,Увлекается бодибилдингом,Занимается бегом,Занимается аэробикой,Ходит на рукопашный бой,Любит стрелять из арбалета,Занимается стрельбой из лука,Увлекается бальными танцами,Занимается восточными танцами,Обожает стритрейсинг,Катается на горном велосипеде,Любит сплавы по рекам,Устраивает файер-шоу,Занимается серфингом,Играет в сокс,Занимается верховой ездой,Катается на квадроцикле,Ходит на тюбинговую горку,Рисует граффити,Собирает лесные ягоды,Занимается фехтованием,Играет в городки,Играет в гольф,Играет на синтезаторе,Занимается макраме,Изготавливает гобелены,Увлекается плетением из лозы,Занимается росписью по стеклу,Увлекается росписью по ткани,Вырезает шкатулки из дерева,Увлекается бисероплетением,Создает искусственные цветы,Занимается изготовлением кукол,Создает венецианские маски,Вяжет на спицах и крючком,Производит украшения,Производит изделия из кожи,Пишет статьи на заказ,Играет в маджонг,Разгадывает сканворды,Любит разгадывать судоку,Занимается аэрографией,Тюнингует машины,Проектирует мебель,Создает видеоролики,Придумывает видеоклипы,Играет в любительском театре,Общается в интернете,Обожает аниме,Смотрит фильмы по вечерам,Изучает хиромантию,Собирает модели самолетов,Создает костюмы для танцев,Помогает в реставрации храмов,Создает настольные игры,Увлекается фотоохотой,Набивает татуировки,Коллекционирует фантики,Коллекционирует магниты,Собирает гербарии,Коллекционирует бабочек,Коллекционирует наклейки,Записывает сновидения,Ведет личный дневник,Коллекционирует пуговицы,Делает аромасвечи,Коллекционирует автографы,Занимается боевыми искусствами,Изучает кунг-фу,Ухаживает за своей собакой,Занимается верховой ездой,Изучает литературу,Увлекается геологией,Ходит на пилатес,Собирает радиоприемники,Ведет онлайн-магазин,Создает декорации,Ухаживает за садиком,Занимается греблей на каноэ,Реставрирует автомобили,Ходит с друзьями в боулинг,Увлекается написанием писем,Гоняет на мотоцикле,Учится на сомелье\",\n  \"food\": \"Барбекю,Бастурма,Бефстроганов,Бигос,Битки,Биточки,Бифштекс,Блины,Борщ,Брускетта,Буженина,Бульон,Буррито,Бутерброд,Вареники,Винегрет,Гаспачо,Голубцы,Гриль,Гуляш,Долма,Драники,Душенина,Жаркое,Жульен,Запеканка,Канапе,Каре ягненка,Каша,Каша гречневая,Овсянка,Овсяная каша,Кебаб,Геркулесовая каша,Кесадилья,Кишеня,Клёцки,Колбаса,Вареная колбаса,Сервелат,Котлета,Крокеты,Купаты,Курник,Кус-кус,Лагман,Лазанья,Лапша,Люля-кебаб,Манник,Манты,Маффины,Медальон,Мимоза,Огуречник,Окрошка,Оливье,Отбивная,Оладьи,Паста,Пастрома,Паэлья,Пельмени,Пицца,Печенье,Похлёбка,Пудинг,Пюре,Равиоли,Рагу,Рататуй,Рассольник,Ризотто,Роллы,Ростбиф,Рубцы,Рулет,Рулька,Рыбник,Салат,Савоярди,Сапсо,Сациви,Свекольник,Селедка под шубой,Сырники,Солянка,Стейк,Студень,Суп,Сурими,Суши,Сэндвич,Тарталетки,Тефтели,Тирамису,Тортилья,Тофу,Фондю,Картошка фри,Фрикадельки,Халва,Харчо,Ханум,Хашлама,Хинкали,Холодец,Хумус,Цыплёнок табака,Чахохбили,Чизкейк,Шаурма,Шашлык,Шницель,Шурпа,Щи,Яичница,Пицца,Аджапсандал,Бургер,Луковый суп,Уха по-фински,Фалафель,Пита,Лапша Фо Бо,Гречка,Макароны,Шоколад,Вареная кукуруза,Каравай,Карпаччо,Карамель,Сыр в кляре,Салат Цезарь,Греческий салат,Креветки,Омар,Крем-фреш,Блинчики с творогом,Красная икра,Венский шницель,Мидии,Жареная говядина,Хачапури,Борщ,Копченый лосось,Вареники,Вареники с картошкой,Гамбургер,Чизбургер,Азу по-татарски,Свинина с овощами,Картофель в мундире,Овощное рагу,Творожная запеканка,Мармелад,Яблочное повидло,Вишневый пирог,Индейка с яблоками,Картофельная запеканка,Куриное филе,Рис с яйцом по-китайски,Пирожок с капустой,Куриное филе с грибами,Запеченная курица,Буррито,Гуляш из говядины,Говядина по-строгановски,Вареники с творогом,Мясо по-французски,Узбекский плов,Драники с луком,Куриные грудки,Фахитос с курицей,Курица по-китайски,Мясные котлеты,Рыбные котлеты,Жареные ребрышки,Треска с помидорами,Свинина тушеная,Тушеная капуста,Жаркое в горшочке,Свиная отбивная,Филе индейки,Жареный рис,Куриные котлеты,Баклажаны по-пармски,Кальмары,Филе хека,Лапша с тыквой,Свинина с чесноком и сыром,Гречневая лапша с креветками,Гречка с мясом и томатами,Говядина по-бургундски,Свекольник,Форель в маринаде,Севиче,Чапати,Макароны в сосисках,Куриные наггетсы,Перец фаршированный,Куриные сердца,Морковные котлеты,Оладьи из кабачков,Тигровые креветки,Куриная печень,Сашими,Самса,Сибас,Мороженое,Эскимо,Курица с имбирем,Сырные палочки,Кексы,Фетучини с ветчиной,Ризотто с тыквой,Мясные тефтели,Рыба с овощами,Устрицы с лимоном,Брауни,Классическая шарлотка,Йогурт,Пирог «Зебра»,Медовик,Наполеон,Венские вафли,Маффины с голубикой,Овсяное печенье,Шоколадные кексы,Кефирные оладьи,Капустный пирог,Мясной рулет,Торт,Торт «Сметанник»,Французские тосты,Творожные маффины,Печенье песочное,Банановый пирог,Форшмак,Торт «Прага»,Торт «Панчо»,Бельгийские пирожные,Эклеры,Имбирное печенье,Имбирный пряник,Безе,Зефир,Пастила\",\n  \"pet\": \"Немецкая овчарка,Лабрадор,Лабрадор-ретривер,Английский бульдог,Пудель,Бигль,Золотистый ретривер,Чихуахуа,Мопс,Йоркширский терьер,Ротвейлер,Сибирский хаски,Немецкий боксер,Французский бульдог,Английский мастиф,Немецкий дог,Такса,Доберман,Мальтийская болонка,Питбультерьер,Ши-тцу,Бобтейл,Акита-ину,Бордер-колли,Чау-чау,Английский пойнтер,Померанский шпиц,Грейхаунд,Аляскинский маламут,Австралийская овчарка,Кавказская овчарка,Ньюфаундленд,Вельш-корги пемброк,Вельш-корги,Сенбернар,Сиба-ину,Бассет-хаунд,Стаффордширский бультерьер,Далматинец,Курцхаар,Бернский зенненхунд,Бишон фризе,Английский кокер-спаниель,Карликовый пинчер,Бультерьер,Шелти,Афганская борзая,Кинг-чарльз-спаниель,Бостон-терьер,Колли,Эрдельтерьер,Лайка,Мейн-кун,Британская кошка,Персидская кошка,Рэгдолл,Сиамская кошка,Сфинкс,Абиссинская кошка,Бурма,Бенгальская кошка,Бирманская кошка,Сибирская кошка,Японский бобтейл,Русская голубая кошка,Американский бобтейл,Шотландская вислоухая,Девон-рекс,Корниш-рекс,Норвежская лесная кошка,Гималайская кошка,Мэнкс,Бомбейская кошка,Оцикет,Ангорская кошка,Тонкинская кошка,Египетский мау,Лаперм,Манчкин,Турецкий ван,Сингапурская кошка,Гавана,Рагамаффин,Пиксибоб,Бурмилла,Сноу-Шу,Кимрик,Нибелунг,Канарейка,Волнистый попугайчик,Кролик,Морская свинка,Хорек,Хомяк,Австралийский мист,Американский керл,Аравийский мау,Бородатый колли,Брюссельский грифон,Ирландский волкодав,Домашняя улитка,Попугай,Пираньи,Золотая рыбка,Енот,Крыса домашняя,Морская свинка,Хамелеон,Шиншилла,Ящерица,Питон,Удав,Песчанка,Скорпион,Игрунок,Мини-пиг,Черепахи,Игуана,Паук,Домашняя сова,Белки,Попугай корелла,Жако,Ара,Какаду,Попугая монах,Попугай кеа,Карликовый ёж,Африканский ёж,Домашний львенок,Домашний тигр,Носуха,Чилийская белка дегу,Красноухая черепаха,Среднеазиатская черепаха,Европейская черепаха,Мускусная черепаха,Крыса рекс,Атласная крыса,Бесхвостые крысы,Крыса сфинкс,Крыса дамбо,Радужный удав,Королевский питон,Императорский удав,Королевская кобра,Рыки гуппи,Арована азиатская,Карп кои,Пецилия пятнистая,Голубой неон,Зеленый меченосец,Суматранский барбус,Акулий балу,Боция клоун,Креветка амано,Обыкновенная скалярия,Глазчатый астронотус,Крылатка-зебра,Дискус равнополосый,Антенновая крылатка,Красный неон,Голубой сомик,Серпас вуалевый,Фахака,Бетта чёрная,Бетта смарагдовая,Зеленый тетраодон,Усатый сомик,Яванская макака,Обыкновенная лисица,Корсак,Афганская лиса,Доминиканская квакша,Австралийская квакша,Озерная лягушка,Чесночница,Домашние амадины,Зяблики,Аратинги,Хамелеон четырехрогий,Агама древесная,Обыкновенная игуана,Агама бородатая,Длиннохвостая неясыть,Домовой сычик,Сипуха,Домашний филин,Ушастая сова,Белая мышь,Вулкановая мышь,Мышь полевка,Декоративная мышь,Мышь фазза,Белополосая белка\",\n  \"dream\": \"Дом на берегу озера,Морской круиз,Свой детский центр,Двое детей,Кругосветное путешествие,Написать портрет,Путешествовать каждый год,Посетить острова Малайзии,Устроить родителям Новый год,Сменить имя в паспорте,Пройти специальные курсы,Купить хороший телефон,Писать статьи для журнала,Выпустить сборник своих стихов,Побороть детские страхи,Слетать в Токио,Прыжок с тарзанкой,Купить кардиган и пальто,Увидеть Лувр во Франции,Посетить Антарктиду с экспедицией,Побывать в Канаде,Получить шенген,Сплав на байдарках,Уик-энд тур на джипе,Горный поход,Слетать в Коста-Рику,Попариться в русской бане,Увидеть Северное сияние,Дарить людям счастье и любовь,Спеть песню в караоке,Тур на машине по горам,Изучить новый язык,Посетить все чудеса мира,Добиться идеального веса,Попробовать новую профессию,Пробежать марафон,Заняться новым видом спорта,Покататься на лыжах в горах,Следовать своей мечте,Заняться своим бизнесом,Стать ментором для кого-то,Освоить скайдайвинг,Прыгнуть с парашютом,Сделать большой сюрприз,Сделать что-то значительное,Сделать что-то важное,Сделать добро 5 незнакомцам,Путешествовать на воздушном шаре,Встретить рассвет,Встретить закат,Увидеть солнечное затмение,Посадить дерево,Сделать мегавечеринку,Полностью изменить свой стиль,Сходить на слепое свидание,Победить в споре на деньги,Путешествовать автостопом,Поплавать с дельфинами,Снять фильм,Связать шарф,Создать дом своей мечты,Испечь торт,Пожить в лесу,Посетить пустыню,Стать волонтером,Запустить воздушного змея,Заночевать в стоге сена,Стать вегетарианцем,Обуздать свои страхи,Организовать пикник,Летать первым классом,Посетить вулкан,Полететь на вертолете,Влюбиться,Организовать романтическое свидание,Организовать романтический вечер,Посетить замок в Шотландии,Изменить мир,Помочь кому-нибудь,Посмотреть на оригинал Моны Лизы,Изучить язык жестов,Победить в соревнованиях,Просыпаться в 5 утра,Переехать в другую страну,Улучшить свой английский,Улучшить свой немецкий,Изучить китайский язык,Открыть свой интернет-магазин,Купить дом на берегу моря,Давать уроки йоги,Научиться водить самолет,Обновить свой гардероб,Танцевать под дождем,Выпустить свою линию одежды,Кататься на машине по стране,Написать роман,Купить новую доску для серфа,Связать свитер,Поехать с друзьями в Мексику,Нарисовать 10 футболок,Создать свою коллекцию украшений,Научиться стрелять из пистолета,Жить в мультике,Посадить сад перед домом,Сделать фотосессию,Прокатиться на гоночной машине,Посетить Лас-Вегас и казино,Сделать татуировку,Открыть отель на берегу моря,Ходить каждую неделю в кино,Научиться водить мотоцикл,Проколоть ухо,Написать картину маслом,Выиграть в лотерею,Собрать пазл,Организовать благотворительность,Потусить на Ибице,Увидеть Тадж-Махал,Побывать на Бора-Бора,Найти свое призвание в жизни,Написать книгу,Иметь дома в Европе,Научиться разбираться в людях,Накачать красивый пресс,Всегда быть в хорошем настроении,Научиться управлять финансами,Достигнуть финансовой свободы,Стать миллионером,Инвестировать в золото,Сходить на рок-концерт,Полететь на частном самолете,Вырасти как личность,Стать наставником,Изучить цифровую фотографию,Сняться в фильме,Наслаждаться жизнью,Быть примером для всех,Поймать лосося на Дальнем Востоке,Жить в радости,Построить во дворе беседку,Сделать дома настоящий камин,Купить квадроцикл,Нарисовать шедевр,Купить розовый кадиллак,Залезть на пирамиду Хеопса\"\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/games/mnemonics/dossier/wordsRu.ts"],"sourceRoot":""}